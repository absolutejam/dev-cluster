// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema RequestAuthentication
 */
export class RequestAuthentication extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RequestAuthentication"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1',
    kind: 'RequestAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "RequestAuthentication".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RequestAuthenticationProps = {}): any {
    return {
      ...RequestAuthentication.GVK,
      ...toJson_RequestAuthenticationProps(props),
    };
  }

  /**
   * Defines a "RequestAuthentication" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RequestAuthenticationProps = {}) {
    super(scope, id, {
      ...RequestAuthentication.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RequestAuthentication.GVK,
      ...toJson_RequestAuthenticationProps(resolved),
    };
  }
}

/**
 * @schema RequestAuthentication
 */
export interface RequestAuthenticationProps {
  /**
   * @schema RequestAuthentication#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Request authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/request_authentication.html
   *
   * @schema RequestAuthentication#spec
   */
  readonly spec?: RequestAuthenticationSpec;

}

/**
 * Converts an object of type 'RequestAuthenticationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationProps(obj: RequestAuthenticationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RequestAuthenticationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Request authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/request_authentication.html
 *
 * @schema RequestAuthenticationSpec
 */
export interface RequestAuthenticationSpec {
  /**
   * Define the list of JWTs that can be validated at the selected workloads' proxy.
   *
   * @schema RequestAuthenticationSpec#jwtRules
   */
  readonly jwtRules?: RequestAuthenticationSpecJwtRules[];

  /**
   * Optional.
   *
   * @schema RequestAuthenticationSpec#selector
   */
  readonly selector?: RequestAuthenticationSpecSelector;

  /**
   * Optional.
   *
   * @schema RequestAuthenticationSpec#targetRef
   */
  readonly targetRef?: RequestAuthenticationSpecTargetRef;

}

/**
 * Converts an object of type 'RequestAuthenticationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpec(obj: RequestAuthenticationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jwtRules': obj.jwtRules?.map(y => toJson_RequestAuthenticationSpecJwtRules(y)),
    'selector': toJson_RequestAuthenticationSpecSelector(obj.selector),
    'targetRef': toJson_RequestAuthenticationSpecTargetRef(obj.targetRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRules
 */
export interface RequestAuthenticationSpecJwtRules {
  /**
   * The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3) that are allowed to access.
   *
   * @schema RequestAuthenticationSpecJwtRules#audiences
   */
  readonly audiences?: string[];

  /**
   * If set to true, the original token will be kept for the upstream request.
   *
   * @schema RequestAuthenticationSpecJwtRules#forwardOriginalToken
   */
  readonly forwardOriginalToken?: boolean;

  /**
   * List of header locations from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromHeaders
   */
  readonly fromHeaders?: RequestAuthenticationSpecJwtRulesFromHeaders[];

  /**
   * List of query parameters from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromParams
   */
  readonly fromParams?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#issuer
   */
  readonly issuer: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#jwks
   */
  readonly jwks?: string;

  /**
   * URL of the provider's public key set to validate signature of the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#jwks_uri
   */
  readonly jwks_uri?: string;

  /**
   * URL of the provider's public key set to validate signature of the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token.
   *
   * @schema RequestAuthenticationSpecJwtRules#outputClaimToHeaders
   */
  readonly outputClaimToHeaders?: RequestAuthenticationSpecJwtRulesOutputClaimToHeaders[];

  /**
   * This field specifies the header name to output a successfully verified JWT payload to the backend.
   *
   * @schema RequestAuthenticationSpecJwtRules#outputPayloadToHeader
   */
  readonly outputPayloadToHeader?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRules(obj: RequestAuthenticationSpecJwtRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audiences': obj.audiences?.map(y => y),
    'forwardOriginalToken': obj.forwardOriginalToken,
    'fromHeaders': obj.fromHeaders?.map(y => toJson_RequestAuthenticationSpecJwtRulesFromHeaders(y)),
    'fromParams': obj.fromParams?.map(y => y),
    'issuer': obj.issuer,
    'jwks': obj.jwks,
    'jwks_uri': obj.jwksUri,
    'jwksUri': obj.jwksUri,
    'outputClaimToHeaders': obj.outputClaimToHeaders?.map(y => toJson_RequestAuthenticationSpecJwtRulesOutputClaimToHeaders(y)),
    'outputPayloadToHeader': obj.outputPayloadToHeader,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationSpecSelector
 */
export interface RequestAuthenticationSpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema RequestAuthenticationSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RequestAuthenticationSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecSelector(obj: RequestAuthenticationSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationSpecTargetRef
 */
export interface RequestAuthenticationSpecTargetRef {
  /**
   * group is the group of the target resource.
   *
   * @schema RequestAuthenticationSpecTargetRef#group
   */
  readonly group?: string;

  /**
   * kind is kind of the target resource.
   *
   * @schema RequestAuthenticationSpecTargetRef#kind
   */
  readonly kind?: string;

  /**
   * name is the name of the target resource.
   *
   * @schema RequestAuthenticationSpecTargetRef#name
   */
  readonly name?: string;

  /**
   * namespace is the namespace of the referent.
   *
   * @schema RequestAuthenticationSpecTargetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecTargetRef(obj: RequestAuthenticationSpecTargetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRulesFromHeaders
 */
export interface RequestAuthenticationSpecJwtRulesFromHeaders {
  /**
   * The HTTP header name.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#name
   */
  readonly name: string;

  /**
   * The prefix that should be stripped before decoding the token.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRulesFromHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRulesFromHeaders(obj: RequestAuthenticationSpecJwtRulesFromHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders
 */
export interface RequestAuthenticationSpecJwtRulesOutputClaimToHeaders {
  /**
   * The name of the claim to be copied from.
   *
   * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders#claim
   */
  readonly claim?: string;

  /**
   * The name of the header to be created.
   *
   * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRulesOutputClaimToHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRulesOutputClaimToHeaders(obj: RequestAuthenticationSpecJwtRulesOutputClaimToHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claim': obj.claim,
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema RequestAuthenticationV1Beta1
 */
export class RequestAuthenticationV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RequestAuthenticationV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'RequestAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "RequestAuthenticationV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RequestAuthenticationV1Beta1Props = {}): any {
    return {
      ...RequestAuthenticationV1Beta1.GVK,
      ...toJson_RequestAuthenticationV1Beta1Props(props),
    };
  }

  /**
   * Defines a "RequestAuthenticationV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RequestAuthenticationV1Beta1Props = {}) {
    super(scope, id, {
      ...RequestAuthenticationV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RequestAuthenticationV1Beta1.GVK,
      ...toJson_RequestAuthenticationV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema RequestAuthenticationV1Beta1
 */
export interface RequestAuthenticationV1Beta1Props {
  /**
   * @schema RequestAuthenticationV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Request authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/request_authentication.html
   *
   * @schema RequestAuthenticationV1Beta1#spec
   */
  readonly spec?: RequestAuthenticationV1Beta1Spec;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1Props(obj: RequestAuthenticationV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RequestAuthenticationV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Request authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/request_authentication.html
 *
 * @schema RequestAuthenticationV1Beta1Spec
 */
export interface RequestAuthenticationV1Beta1Spec {
  /**
   * Define the list of JWTs that can be validated at the selected workloads' proxy.
   *
   * @schema RequestAuthenticationV1Beta1Spec#jwtRules
   */
  readonly jwtRules?: RequestAuthenticationV1Beta1SpecJwtRules[];

  /**
   * Optional.
   *
   * @schema RequestAuthenticationV1Beta1Spec#selector
   */
  readonly selector?: RequestAuthenticationV1Beta1SpecSelector;

  /**
   * Optional.
   *
   * @schema RequestAuthenticationV1Beta1Spec#targetRef
   */
  readonly targetRef?: RequestAuthenticationV1Beta1SpecTargetRef;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1Spec(obj: RequestAuthenticationV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jwtRules': obj.jwtRules?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRules(y)),
    'selector': toJson_RequestAuthenticationV1Beta1SpecSelector(obj.selector),
    'targetRef': toJson_RequestAuthenticationV1Beta1SpecTargetRef(obj.targetRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRules
 */
export interface RequestAuthenticationV1Beta1SpecJwtRules {
  /**
   * The list of JWT [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3) that are allowed to access.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#audiences
   */
  readonly audiences?: string[];

  /**
   * If set to true, the original token will be kept for the upstream request.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#forwardOriginalToken
   */
  readonly forwardOriginalToken?: boolean;

  /**
   * List of header locations from which JWT is expected.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#fromHeaders
   */
  readonly fromHeaders?: RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders[];

  /**
   * List of query parameters from which JWT is expected.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#fromParams
   */
  readonly fromParams?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#issuer
   */
  readonly issuer: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwks
   */
  readonly jwks?: string;

  /**
   * URL of the provider's public key set to validate signature of the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwks_uri
   */
  readonly jwks_uri?: string;

  /**
   * URL of the provider's public key set to validate signature of the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#outputClaimToHeaders
   */
  readonly outputClaimToHeaders?: RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders[];

  /**
   * This field specifies the header name to output a successfully verified JWT payload to the backend.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#outputPayloadToHeader
   */
  readonly outputPayloadToHeader?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRules(obj: RequestAuthenticationV1Beta1SpecJwtRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audiences': obj.audiences?.map(y => y),
    'forwardOriginalToken': obj.forwardOriginalToken,
    'fromHeaders': obj.fromHeaders?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders(y)),
    'fromParams': obj.fromParams?.map(y => y),
    'issuer': obj.issuer,
    'jwks': obj.jwks,
    'jwks_uri': obj.jwksUri,
    'jwksUri': obj.jwksUri,
    'outputClaimToHeaders': obj.outputClaimToHeaders?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders(y)),
    'outputPayloadToHeader': obj.outputPayloadToHeader,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationV1Beta1SpecSelector
 */
export interface RequestAuthenticationV1Beta1SpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema RequestAuthenticationV1Beta1SpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecSelector(obj: RequestAuthenticationV1Beta1SpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationV1Beta1SpecTargetRef
 */
export interface RequestAuthenticationV1Beta1SpecTargetRef {
  /**
   * group is the group of the target resource.
   *
   * @schema RequestAuthenticationV1Beta1SpecTargetRef#group
   */
  readonly group?: string;

  /**
   * kind is kind of the target resource.
   *
   * @schema RequestAuthenticationV1Beta1SpecTargetRef#kind
   */
  readonly kind?: string;

  /**
   * name is the name of the target resource.
   *
   * @schema RequestAuthenticationV1Beta1SpecTargetRef#name
   */
  readonly name?: string;

  /**
   * namespace is the namespace of the referent.
   *
   * @schema RequestAuthenticationV1Beta1SpecTargetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecTargetRef(obj: RequestAuthenticationV1Beta1SpecTargetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders
 */
export interface RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders {
  /**
   * The HTTP header name.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders#name
   */
  readonly name: string;

  /**
   * The prefix that should be stripped before decoding the token.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders(obj: RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders
 */
export interface RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders {
  /**
   * The name of the claim to be copied from.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders#claim
   */
  readonly claim?: string;

  /**
   * The name of the header to be created.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders(obj: RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claim': obj.claim,
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

