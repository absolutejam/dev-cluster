// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema ProxyConfig
 */
export class ProxyConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProxyConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'ProxyConfig',
  }

  /**
   * Renders a Kubernetes manifest for "ProxyConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProxyConfigProps = {}): any {
    return {
      ...ProxyConfig.GVK,
      ...toJson_ProxyConfigProps(props),
    };
  }

  /**
   * Defines a "ProxyConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProxyConfigProps = {}) {
    super(scope, id, {
      ...ProxyConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ProxyConfig.GVK,
      ...toJson_ProxyConfigProps(resolved),
    };
  }
}

/**
 * @schema ProxyConfig
 */
export interface ProxyConfigProps {
  /**
   * @schema ProxyConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
   *
   * @schema ProxyConfig#spec
   */
  readonly spec?: ProxyConfigSpec;

}

/**
 * Converts an object of type 'ProxyConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigProps(obj: ProxyConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProxyConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
 *
 * @schema ProxyConfigSpec
 */
export interface ProxyConfigSpec {
  /**
   * The number of worker threads to run.
   *
   * @schema ProxyConfigSpec#concurrency
   */
  readonly concurrency?: number;

  /**
   * Additional environment variables for the proxy.
   *
   * @schema ProxyConfigSpec#environmentVariables
   */
  readonly environmentVariables?: { [key: string]: string };

  /**
   * Specifies the details of the proxy image.
   *
   * @schema ProxyConfigSpec#image
   */
  readonly image?: ProxyConfigSpecImage;

  /**
   * Optional.
   *
   * @schema ProxyConfigSpec#selector
   */
  readonly selector?: ProxyConfigSpecSelector;

}

/**
 * Converts an object of type 'ProxyConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpec(obj: ProxyConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'concurrency': obj.concurrency,
    'environmentVariables': ((obj.environmentVariables) === undefined) ? undefined : (Object.entries(obj.environmentVariables).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'image': toJson_ProxyConfigSpecImage(obj.image),
    'selector': toJson_ProxyConfigSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the details of the proxy image.
 *
 * @schema ProxyConfigSpecImage
 */
export interface ProxyConfigSpecImage {
  /**
   * The image type of the image.
   *
   * @schema ProxyConfigSpecImage#imageType
   */
  readonly imageType?: string;

}

/**
 * Converts an object of type 'ProxyConfigSpecImage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpecImage(obj: ProxyConfigSpecImage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'imageType': obj.imageType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema ProxyConfigSpecSelector
 */
export interface ProxyConfigSpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema ProxyConfigSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ProxyConfigSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpecSelector(obj: ProxyConfigSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

