// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema PeerAuthentication
 */
export class PeerAuthentication extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PeerAuthentication"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'PeerAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "PeerAuthentication".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PeerAuthenticationProps = {}): any {
    return {
      ...PeerAuthentication.GVK,
      ...toJson_PeerAuthenticationProps(props),
    };
  }

  /**
   * Defines a "PeerAuthentication" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PeerAuthenticationProps = {}) {
    super(scope, id, {
      ...PeerAuthentication.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PeerAuthentication.GVK,
      ...toJson_PeerAuthenticationProps(resolved),
    };
  }
}

/**
 * @schema PeerAuthentication
 */
export interface PeerAuthenticationProps {
  /**
   * @schema PeerAuthentication#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
   *
   * @schema PeerAuthentication#spec
   */
  readonly spec?: PeerAuthenticationSpec;

}

/**
 * Converts an object of type 'PeerAuthenticationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationProps(obj: PeerAuthenticationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PeerAuthenticationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
 *
 * @schema PeerAuthenticationSpec
 */
export interface PeerAuthenticationSpec {
  /**
   * Mutual TLS settings for workload.
   *
   * @schema PeerAuthenticationSpec#mtls
   */
  readonly mtls?: PeerAuthenticationSpecMtls;

  /**
   * Port specific mutual TLS settings.
   *
   * @schema PeerAuthenticationSpec#portLevelMtls
   */
  readonly portLevelMtls?: { [key: string]: PeerAuthenticationSpecPortLevelMtls };

  /**
   * The selector determines the workloads to apply the ChannelAuthentication on.
   *
   * @schema PeerAuthenticationSpec#selector
   */
  readonly selector?: PeerAuthenticationSpecSelector;

}

/**
 * Converts an object of type 'PeerAuthenticationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpec(obj: PeerAuthenticationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mtls': toJson_PeerAuthenticationSpecMtls(obj.mtls),
    'portLevelMtls': ((obj.portLevelMtls) === undefined) ? undefined : (Object.entries(obj.portLevelMtls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_PeerAuthenticationSpecPortLevelMtls(i[1]) }), {})),
    'selector': toJson_PeerAuthenticationSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Mutual TLS settings for workload.
 *
 * @schema PeerAuthenticationSpecMtls
 */
export interface PeerAuthenticationSpecMtls {
  /**
   * Defines the mTLS mode used for peer authentication.
   *
   * @schema PeerAuthenticationSpecMtls#mode
   */
  readonly mode?: PeerAuthenticationSpecMtlsMode;

}

/**
 * Converts an object of type 'PeerAuthenticationSpecMtls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecMtls(obj: PeerAuthenticationSpecMtls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PeerAuthenticationSpecPortLevelMtls
 */
export interface PeerAuthenticationSpecPortLevelMtls {
  /**
   * Defines the mTLS mode used for peer authentication.
   *
   * @schema PeerAuthenticationSpecPortLevelMtls#mode
   */
  readonly mode?: PeerAuthenticationSpecPortLevelMtlsMode;

}

/**
 * Converts an object of type 'PeerAuthenticationSpecPortLevelMtls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecPortLevelMtls(obj: PeerAuthenticationSpecPortLevelMtls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The selector determines the workloads to apply the ChannelAuthentication on.
 *
 * @schema PeerAuthenticationSpecSelector
 */
export interface PeerAuthenticationSpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema PeerAuthenticationSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PeerAuthenticationSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecSelector(obj: PeerAuthenticationSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines the mTLS mode used for peer authentication.
 *
 * @schema PeerAuthenticationSpecMtlsMode
 */
export enum PeerAuthenticationSpecMtlsMode {
  /** UNSET */
  UNSET = "UNSET",
  /** DISABLE */
  DISABLE = "DISABLE",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}

/**
 * Defines the mTLS mode used for peer authentication.
 *
 * @schema PeerAuthenticationSpecPortLevelMtlsMode
 */
export enum PeerAuthenticationSpecPortLevelMtlsMode {
  /** UNSET */
  UNSET = "UNSET",
  /** DISABLE */
  DISABLE = "DISABLE",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}

