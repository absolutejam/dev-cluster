// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema AuthorizationPolicy
 */
export class AuthorizationPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AuthorizationPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1',
    kind: 'AuthorizationPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "AuthorizationPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AuthorizationPolicyProps = {}): any {
    return {
      ...AuthorizationPolicy.GVK,
      ...toJson_AuthorizationPolicyProps(props),
    };
  }

  /**
   * Defines a "AuthorizationPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AuthorizationPolicyProps = {}) {
    super(scope, id, {
      ...AuthorizationPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AuthorizationPolicy.GVK,
      ...toJson_AuthorizationPolicyProps(resolved),
    };
  }
}

/**
 * @schema AuthorizationPolicy
 */
export interface AuthorizationPolicyProps {
  /**
   * @schema AuthorizationPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
   *
   * @schema AuthorizationPolicy#spec
   */
  readonly spec?: AuthorizationPolicySpec;

}

/**
 * Converts an object of type 'AuthorizationPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyProps(obj: AuthorizationPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AuthorizationPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
 *
 * @schema AuthorizationPolicySpec
 */
export interface AuthorizationPolicySpec {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#action
   */
  readonly action?: AuthorizationPolicySpecAction;

  /**
   * Specifies detailed configuration of the CUSTOM action.
   *
   * @schema AuthorizationPolicySpec#provider
   */
  readonly provider?: AuthorizationPolicySpecProvider;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#rules
   */
  readonly rules?: AuthorizationPolicySpecRules[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#selector
   */
  readonly selector?: AuthorizationPolicySpecSelector;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#targetRef
   */
  readonly targetRef?: AuthorizationPolicySpecTargetRef;

}

/**
 * Converts an object of type 'AuthorizationPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpec(obj: AuthorizationPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'provider': toJson_AuthorizationPolicySpecProvider(obj.provider),
    'rules': obj.rules?.map(y => toJson_AuthorizationPolicySpecRules(y)),
    'selector': toJson_AuthorizationPolicySpecSelector(obj.selector),
    'targetRef': toJson_AuthorizationPolicySpecTargetRef(obj.targetRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicySpecAction
 */
export enum AuthorizationPolicySpecAction {
  /** ALLOW */
  ALLOW = "ALLOW",
  /** DENY */
  DENY = "DENY",
  /** AUDIT */
  AUDIT = "AUDIT",
  /** CUSTOM */
  CUSTOM = "CUSTOM",
}

/**
 * Specifies detailed configuration of the CUSTOM action.
 *
 * @schema AuthorizationPolicySpecProvider
 */
export interface AuthorizationPolicySpecProvider {
  /**
   * Specifies the name of the extension provider.
   *
   * @schema AuthorizationPolicySpecProvider#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecProvider(obj: AuthorizationPolicySpecProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRules
 */
export interface AuthorizationPolicySpecRules {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#from
   */
  readonly from?: AuthorizationPolicySpecRulesFrom[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#to
   */
  readonly to?: AuthorizationPolicySpecRulesTo[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#when
   */
  readonly when?: AuthorizationPolicySpecRulesWhen[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRules(obj: AuthorizationPolicySpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_AuthorizationPolicySpecRulesFrom(y)),
    'to': obj.to?.map(y => toJson_AuthorizationPolicySpecRulesTo(y)),
    'when': obj.when?.map(y => toJson_AuthorizationPolicySpecRulesWhen(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicySpecSelector
 */
export interface AuthorizationPolicySpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema AuthorizationPolicySpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'AuthorizationPolicySpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecSelector(obj: AuthorizationPolicySpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicySpecTargetRef
 */
export interface AuthorizationPolicySpecTargetRef {
  /**
   * group is the group of the target resource.
   *
   * @schema AuthorizationPolicySpecTargetRef#group
   */
  readonly group?: string;

  /**
   * kind is kind of the target resource.
   *
   * @schema AuthorizationPolicySpecTargetRef#kind
   */
  readonly kind?: string;

  /**
   * name is the name of the target resource.
   *
   * @schema AuthorizationPolicySpecTargetRef#name
   */
  readonly name?: string;

  /**
   * namespace is the namespace of the referent.
   *
   * @schema AuthorizationPolicySpecTargetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecTargetRef(obj: AuthorizationPolicySpecTargetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesFrom
 */
export interface AuthorizationPolicySpecRulesFrom {
  /**
   * Source specifies the source of a request.
   *
   * @schema AuthorizationPolicySpecRulesFrom#source
   */
  readonly source?: AuthorizationPolicySpecRulesFromSource;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesFrom(obj: AuthorizationPolicySpecRulesFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'source': toJson_AuthorizationPolicySpecRulesFromSource(obj.source),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesTo
 */
export interface AuthorizationPolicySpecRulesTo {
  /**
   * Operation specifies the operation of a request.
   *
   * @schema AuthorizationPolicySpecRulesTo#operation
   */
  readonly operation?: AuthorizationPolicySpecRulesToOperation;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesTo(obj: AuthorizationPolicySpecRulesTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'operation': toJson_AuthorizationPolicySpecRulesToOperation(obj.operation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesWhen
 */
export interface AuthorizationPolicySpecRulesWhen {
  /**
   * The name of an Istio attribute.
   *
   * @schema AuthorizationPolicySpecRulesWhen#key
   */
  readonly key: string;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesWhen#notValues
   */
  readonly notValues?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesWhen#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesWhen' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesWhen(obj: AuthorizationPolicySpecRulesWhen | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'notValues': obj.notValues?.map(y => y),
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source specifies the source of a request.
 *
 * @schema AuthorizationPolicySpecRulesFromSource
 */
export interface AuthorizationPolicySpecRulesFromSource {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#ipBlocks
   */
  readonly ipBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#namespaces
   */
  readonly namespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notIpBlocks
   */
  readonly notIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notNamespaces
   */
  readonly notNamespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notPrincipals
   */
  readonly notPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notRemoteIpBlocks
   */
  readonly notRemoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notRequestPrincipals
   */
  readonly notRequestPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#principals
   */
  readonly principals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#remoteIpBlocks
   */
  readonly remoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#requestPrincipals
   */
  readonly requestPrincipals?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesFromSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesFromSource(obj: AuthorizationPolicySpecRulesFromSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipBlocks': obj.ipBlocks?.map(y => y),
    'namespaces': obj.namespaces?.map(y => y),
    'notIpBlocks': obj.notIpBlocks?.map(y => y),
    'notNamespaces': obj.notNamespaces?.map(y => y),
    'notPrincipals': obj.notPrincipals?.map(y => y),
    'notRemoteIpBlocks': obj.notRemoteIpBlocks?.map(y => y),
    'notRequestPrincipals': obj.notRequestPrincipals?.map(y => y),
    'principals': obj.principals?.map(y => y),
    'remoteIpBlocks': obj.remoteIpBlocks?.map(y => y),
    'requestPrincipals': obj.requestPrincipals?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Operation specifies the operation of a request.
 *
 * @schema AuthorizationPolicySpecRulesToOperation
 */
export interface AuthorizationPolicySpecRulesToOperation {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#hosts
   */
  readonly hosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#methods
   */
  readonly methods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notHosts
   */
  readonly notHosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notMethods
   */
  readonly notMethods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notPaths
   */
  readonly notPaths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notPorts
   */
  readonly notPorts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#paths
   */
  readonly paths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#ports
   */
  readonly ports?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesToOperation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesToOperation(obj: AuthorizationPolicySpecRulesToOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'notHosts': obj.notHosts?.map(y => y),
    'notMethods': obj.notMethods?.map(y => y),
    'notPaths': obj.notPaths?.map(y => y),
    'notPorts': obj.notPorts?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'ports': obj.ports?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema AuthorizationPolicyV1Beta1
 */
export class AuthorizationPolicyV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AuthorizationPolicyV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'AuthorizationPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "AuthorizationPolicyV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AuthorizationPolicyV1Beta1Props = {}): any {
    return {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...toJson_AuthorizationPolicyV1Beta1Props(props),
    };
  }

  /**
   * Defines a "AuthorizationPolicyV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AuthorizationPolicyV1Beta1Props = {}) {
    super(scope, id, {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...toJson_AuthorizationPolicyV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema AuthorizationPolicyV1Beta1
 */
export interface AuthorizationPolicyV1Beta1Props {
  /**
   * @schema AuthorizationPolicyV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
   *
   * @schema AuthorizationPolicyV1Beta1#spec
   */
  readonly spec?: AuthorizationPolicyV1Beta1Spec;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1Props(obj: AuthorizationPolicyV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AuthorizationPolicyV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
 *
 * @schema AuthorizationPolicyV1Beta1Spec
 */
export interface AuthorizationPolicyV1Beta1Spec {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#action
   */
  readonly action?: AuthorizationPolicyV1Beta1SpecAction;

  /**
   * Specifies detailed configuration of the CUSTOM action.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#provider
   */
  readonly provider?: AuthorizationPolicyV1Beta1SpecProvider;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#rules
   */
  readonly rules?: AuthorizationPolicyV1Beta1SpecRules[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#selector
   */
  readonly selector?: AuthorizationPolicyV1Beta1SpecSelector;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#targetRef
   */
  readonly targetRef?: AuthorizationPolicyV1Beta1SpecTargetRef;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1Spec(obj: AuthorizationPolicyV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'provider': toJson_AuthorizationPolicyV1Beta1SpecProvider(obj.provider),
    'rules': obj.rules?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRules(y)),
    'selector': toJson_AuthorizationPolicyV1Beta1SpecSelector(obj.selector),
    'targetRef': toJson_AuthorizationPolicyV1Beta1SpecTargetRef(obj.targetRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicyV1Beta1SpecAction
 */
export enum AuthorizationPolicyV1Beta1SpecAction {
  /** ALLOW */
  ALLOW = "ALLOW",
  /** DENY */
  DENY = "DENY",
  /** AUDIT */
  AUDIT = "AUDIT",
  /** CUSTOM */
  CUSTOM = "CUSTOM",
}

/**
 * Specifies detailed configuration of the CUSTOM action.
 *
 * @schema AuthorizationPolicyV1Beta1SpecProvider
 */
export interface AuthorizationPolicyV1Beta1SpecProvider {
  /**
   * Specifies the name of the extension provider.
   *
   * @schema AuthorizationPolicyV1Beta1SpecProvider#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecProvider(obj: AuthorizationPolicyV1Beta1SpecProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRules
 */
export interface AuthorizationPolicyV1Beta1SpecRules {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#from
   */
  readonly from?: AuthorizationPolicyV1Beta1SpecRulesFrom[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#to
   */
  readonly to?: AuthorizationPolicyV1Beta1SpecRulesTo[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#when
   */
  readonly when?: AuthorizationPolicyV1Beta1SpecRulesWhen[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRules(obj: AuthorizationPolicyV1Beta1SpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesFrom(y)),
    'to': obj.to?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesTo(y)),
    'when': obj.when?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesWhen(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicyV1Beta1SpecSelector
 */
export interface AuthorizationPolicyV1Beta1SpecSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
   *
   * @schema AuthorizationPolicyV1Beta1SpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecSelector(obj: AuthorizationPolicyV1Beta1SpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicyV1Beta1SpecTargetRef
 */
export interface AuthorizationPolicyV1Beta1SpecTargetRef {
  /**
   * group is the group of the target resource.
   *
   * @schema AuthorizationPolicyV1Beta1SpecTargetRef#group
   */
  readonly group?: string;

  /**
   * kind is kind of the target resource.
   *
   * @schema AuthorizationPolicyV1Beta1SpecTargetRef#kind
   */
  readonly kind?: string;

  /**
   * name is the name of the target resource.
   *
   * @schema AuthorizationPolicyV1Beta1SpecTargetRef#name
   */
  readonly name?: string;

  /**
   * namespace is the namespace of the referent.
   *
   * @schema AuthorizationPolicyV1Beta1SpecTargetRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecTargetRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecTargetRef(obj: AuthorizationPolicyV1Beta1SpecTargetRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesFrom
 */
export interface AuthorizationPolicyV1Beta1SpecRulesFrom {
  /**
   * Source specifies the source of a request.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFrom#source
   */
  readonly source?: AuthorizationPolicyV1Beta1SpecRulesFromSource;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesFrom(obj: AuthorizationPolicyV1Beta1SpecRulesFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'source': toJson_AuthorizationPolicyV1Beta1SpecRulesFromSource(obj.source),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesTo
 */
export interface AuthorizationPolicyV1Beta1SpecRulesTo {
  /**
   * Operation specifies the operation of a request.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesTo#operation
   */
  readonly operation?: AuthorizationPolicyV1Beta1SpecRulesToOperation;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesTo(obj: AuthorizationPolicyV1Beta1SpecRulesTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'operation': toJson_AuthorizationPolicyV1Beta1SpecRulesToOperation(obj.operation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesWhen
 */
export interface AuthorizationPolicyV1Beta1SpecRulesWhen {
  /**
   * The name of an Istio attribute.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#key
   */
  readonly key: string;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#notValues
   */
  readonly notValues?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesWhen' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesWhen(obj: AuthorizationPolicyV1Beta1SpecRulesWhen | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'notValues': obj.notValues?.map(y => y),
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source specifies the source of a request.
 *
 * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource
 */
export interface AuthorizationPolicyV1Beta1SpecRulesFromSource {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#ipBlocks
   */
  readonly ipBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#namespaces
   */
  readonly namespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notIpBlocks
   */
  readonly notIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notNamespaces
   */
  readonly notNamespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notPrincipals
   */
  readonly notPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notRemoteIpBlocks
   */
  readonly notRemoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notRequestPrincipals
   */
  readonly notRequestPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#principals
   */
  readonly principals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#remoteIpBlocks
   */
  readonly remoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#requestPrincipals
   */
  readonly requestPrincipals?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesFromSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesFromSource(obj: AuthorizationPolicyV1Beta1SpecRulesFromSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipBlocks': obj.ipBlocks?.map(y => y),
    'namespaces': obj.namespaces?.map(y => y),
    'notIpBlocks': obj.notIpBlocks?.map(y => y),
    'notNamespaces': obj.notNamespaces?.map(y => y),
    'notPrincipals': obj.notPrincipals?.map(y => y),
    'notRemoteIpBlocks': obj.notRemoteIpBlocks?.map(y => y),
    'notRequestPrincipals': obj.notRequestPrincipals?.map(y => y),
    'principals': obj.principals?.map(y => y),
    'remoteIpBlocks': obj.remoteIpBlocks?.map(y => y),
    'requestPrincipals': obj.requestPrincipals?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Operation specifies the operation of a request.
 *
 * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation
 */
export interface AuthorizationPolicyV1Beta1SpecRulesToOperation {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#hosts
   */
  readonly hosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#methods
   */
  readonly methods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notHosts
   */
  readonly notHosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notMethods
   */
  readonly notMethods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notPaths
   */
  readonly notPaths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notPorts
   */
  readonly notPorts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#paths
   */
  readonly paths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#ports
   */
  readonly ports?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesToOperation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesToOperation(obj: AuthorizationPolicyV1Beta1SpecRulesToOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'notHosts': obj.notHosts?.map(y => y),
    'notMethods': obj.notMethods?.map(y => y),
    'notPaths': obj.notPaths?.map(y => y),
    'notPorts': obj.notPorts?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'ports': obj.ports?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

