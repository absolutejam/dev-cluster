// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema MySQLBackup
 */
export class MySqlBackup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "MySQLBackup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'mysql.oracle.com/v2',
    kind: 'MySQLBackup',
  }

  /**
   * Renders a Kubernetes manifest for "MySQLBackup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: MySqlBackupProps = {}): any {
    return {
      ...MySqlBackup.GVK,
      ...toJson_MySqlBackupProps(props),
    };
  }

  /**
   * Defines a "MySQLBackup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: MySqlBackupProps = {}) {
    super(scope, id, {
      ...MySqlBackup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...MySqlBackup.GVK,
      ...toJson_MySqlBackupProps(resolved),
    };
  }
}

/**
 * @schema MySQLBackup
 */
export interface MySqlBackupProps {
  /**
   * @schema MySQLBackup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema MySQLBackup#spec
   */
  readonly spec?: MySqlBackupSpec;

}

/**
 * Converts an object of type 'MySqlBackupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupProps(obj: MySqlBackupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_MySqlBackupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpec
 */
export interface MySqlBackupSpec {
  /**
   * @schema MySqlBackupSpec#addTimestampToBackupDirectory
   */
  readonly addTimestampToBackupDirectory?: boolean;

  /**
   * backupProfile specification if backupProfileName is not specified
   *
   * @schema MySqlBackupSpec#backupProfile
   */
  readonly backupProfile?: MySqlBackupSpecBackupProfile;

  /**
   * @schema MySqlBackupSpec#backupProfileName
   */
  readonly backupProfileName?: string;

  /**
   * @schema MySqlBackupSpec#clusterName
   */
  readonly clusterName: string;

  /**
   * @schema MySqlBackupSpec#deleteBackupData
   */
  readonly deleteBackupData?: boolean;

}

/**
 * Converts an object of type 'MySqlBackupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpec(obj: MySqlBackupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addTimestampToBackupDirectory': obj.addTimestampToBackupDirectory,
    'backupProfile': toJson_MySqlBackupSpecBackupProfile(obj.backupProfile),
    'backupProfileName': obj.backupProfileName,
    'clusterName': obj.clusterName,
    'deleteBackupData': obj.deleteBackupData,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * backupProfile specification if backupProfileName is not specified
 *
 * @schema MySqlBackupSpecBackupProfile
 */
export interface MySqlBackupSpecBackupProfile {
  /**
   * @schema MySqlBackupSpecBackupProfile#dumpInstance
   */
  readonly dumpInstance?: MySqlBackupSpecBackupProfileDumpInstance;

  /**
   * @schema MySqlBackupSpecBackupProfile#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema MySqlBackupSpecBackupProfile#podLabels
   */
  readonly podLabels?: any;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfile(obj: MySqlBackupSpecBackupProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpInstance': toJson_MySqlBackupSpecBackupProfileDumpInstance(obj.dumpInstance),
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpecBackupProfileDumpInstance
 */
export interface MySqlBackupSpecBackupProfileDumpInstance {
  /**
   * A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstance#dumpOptions
   */
  readonly dumpOptions?: any;

  /**
   * @schema MySqlBackupSpecBackupProfileDumpInstance#storage
   */
  readonly storage?: MySqlBackupSpecBackupProfileDumpInstanceStorage;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfileDumpInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfileDumpInstance(obj: MySqlBackupSpecBackupProfileDumpInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpOptions': obj.dumpOptions,
    'storage': toJson_MySqlBackupSpecBackupProfileDumpInstanceStorage(obj.storage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpecBackupProfileDumpInstanceStorage
 */
export interface MySqlBackupSpecBackupProfileDumpInstanceStorage {
  /**
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorage#azure
   */
  readonly azure?: MySqlBackupSpecBackupProfileDumpInstanceStorageAzure;

  /**
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorage#ociObjectStorage
   */
  readonly ociObjectStorage?: MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage;

  /**
   * Specification of the PVC to be used. Used 'as is' in pod executing the backup.
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorage#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: any;

  /**
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorage#s3
   */
  readonly s3?: MySqlBackupSpecBackupProfileDumpInstanceStorageS3;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfileDumpInstanceStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfileDumpInstanceStorage(obj: MySqlBackupSpecBackupProfileDumpInstanceStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azure': toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageAzure(obj.azure),
    'ociObjectStorage': toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage(obj.ociObjectStorage),
    'persistentVolumeClaim': obj.persistentVolumeClaim,
    's3': toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageS3(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageAzure
 */
export interface MySqlBackupSpecBackupProfileDumpInstanceStorageAzure {
  /**
   * Name of a Secret with Azure BLOB Storage configuration and credentials
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageAzure#config
   */
  readonly config: string;

  /**
   * Name of the Azure  BLOB Storage container where the dump is stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageAzure#containerName
   */
  readonly containerName: string;

  /**
   * Path in the container where the dump files are stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageAzure#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfileDumpInstanceStorageAzure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageAzure(obj: MySqlBackupSpecBackupProfileDumpInstanceStorageAzure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'containerName': obj.containerName,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage
 */
export interface MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage {
  /**
   * Name of the OCI bucket where backup is stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with data for accessing the bucket
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage#credentials
   */
  readonly credentials: string;

  /**
   * Path in bucket where backup is stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage(obj: MySqlBackupSpecBackupProfileDumpInstanceStorageOciObjectStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'credentials': obj.credentials,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3
 */
export interface MySqlBackupSpecBackupProfileDumpInstanceStorageS3 {
  /**
   * Name of the S3 bucket where the dump is stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with S3 configuration and credentials
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3#config
   */
  readonly config: string;

  /**
   * Override endpoint URL
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3#prefix
   */
  readonly prefix?: string;

  /**
   * Profile being used in configuration files
   *
   * @schema MySqlBackupSpecBackupProfileDumpInstanceStorageS3#profile
   */
  readonly profile?: string;

}

/**
 * Converts an object of type 'MySqlBackupSpecBackupProfileDumpInstanceStorageS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MySqlBackupSpecBackupProfileDumpInstanceStorageS3(obj: MySqlBackupSpecBackupProfileDumpInstanceStorageS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'config': obj.config,
    'endpoint': obj.endpoint,
    'prefix': obj.prefix,
    'profile': obj.profile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

