// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema ServiceEntry
 */
export class ServiceEntry extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServiceEntry"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'ServiceEntry',
  }

  /**
   * Renders a Kubernetes manifest for "ServiceEntry".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServiceEntryProps = {}): any {
    return {
      ...ServiceEntry.GVK,
      ...toJson_ServiceEntryProps(props),
    };
  }

  /**
   * Defines a "ServiceEntry" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServiceEntryProps = {}) {
    super(scope, id, {
      ...ServiceEntry.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServiceEntry.GVK,
      ...toJson_ServiceEntryProps(resolved),
    };
  }
}

/**
 * @schema ServiceEntry
 */
export interface ServiceEntryProps {
  /**
   * @schema ServiceEntry#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
   *
   * @schema ServiceEntry#spec
   */
  readonly spec?: ServiceEntrySpec;

}

/**
 * Converts an object of type 'ServiceEntryProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryProps(obj: ServiceEntryProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ServiceEntrySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
 *
 * @schema ServiceEntrySpec
 */
export interface ServiceEntrySpec {
  /**
   * The virtual IP addresses associated with the service.
   *
   * @schema ServiceEntrySpec#addresses
   */
  readonly addresses?: string[];

  /**
   * One or more endpoints associated with the service.
   *
   * @schema ServiceEntrySpec#endpoints
   */
  readonly endpoints?: ServiceEntrySpecEndpoints[];

  /**
   * A list of namespaces to which this service is exported.
   *
   * @schema ServiceEntrySpec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The hosts associated with the ServiceEntry.
   *
   * @schema ServiceEntrySpec#hosts
   */
  readonly hosts: string[];

  /**
   * Specify whether the service should be considered external to the mesh or part of the mesh.
   *
   * @schema ServiceEntrySpec#location
   */
  readonly location?: ServiceEntrySpecLocation;

  /**
   * The ports associated with the external service.
   *
   * @schema ServiceEntrySpec#ports
   */
  readonly ports?: ServiceEntrySpecPorts[];

  /**
   * Service resolution mode for the hosts.
   *
   * @schema ServiceEntrySpec#resolution
   */
  readonly resolution?: ServiceEntrySpecResolution;

  /**
   * If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
   *
   * @schema ServiceEntrySpec#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * Applicable only for MESH_INTERNAL services.
   *
   * @schema ServiceEntrySpec#workloadSelector
   */
  readonly workloadSelector?: ServiceEntrySpecWorkloadSelector;

}

/**
 * Converts an object of type 'ServiceEntrySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpec(obj: ServiceEntrySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => y),
    'endpoints': obj.endpoints?.map(y => toJson_ServiceEntrySpecEndpoints(y)),
    'exportTo': obj.exportTo?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'location': obj.location,
    'ports': obj.ports?.map(y => toJson_ServiceEntrySpecPorts(y)),
    'resolution': obj.resolution,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'workloadSelector': toJson_ServiceEntrySpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntrySpecEndpoints
 */
export interface ServiceEntrySpecEndpoints {
  /**
   * Address associated with the network endpoint without the port.
   *
   * @schema ServiceEntrySpecEndpoints#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#locality
   */
  readonly locality?: string;

  /**
   * Network enables Istio to group endpoints resident in the same L3 domain/network.
   *
   * @schema ServiceEntrySpecEndpoints#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * The service account associated with the workload if a sidecar is present in the workload.
   *
   * @schema ServiceEntrySpecEndpoints#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ServiceEntrySpecEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecEndpoints(obj: ServiceEntrySpecEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specify whether the service should be considered external to the mesh or part of the mesh.
 *
 * @schema ServiceEntrySpecLocation
 */
export enum ServiceEntrySpecLocation {
  /** MESH_EXTERNAL */
  MESH_UNDERSCORE_EXTERNAL = "MESH_EXTERNAL",
  /** MESH_INTERNAL */
  MESH_UNDERSCORE_INTERNAL = "MESH_INTERNAL",
}

/**
 * @schema ServiceEntrySpecPorts
 */
export interface ServiceEntrySpecPorts {
  /**
   * Label assigned to the port.
   *
   * @schema ServiceEntrySpecPorts#name
   */
  readonly name: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema ServiceEntrySpecPorts#number
   */
  readonly number: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema ServiceEntrySpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * The port number on the endpoint where the traffic will be received.
   *
   * @schema ServiceEntrySpecPorts#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'ServiceEntrySpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecPorts(obj: ServiceEntrySpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service resolution mode for the hosts.
 *
 * @schema ServiceEntrySpecResolution
 */
export enum ServiceEntrySpecResolution {
  /** NONE */
  NONE = "NONE",
  /** STATIC */
  STATIC = "STATIC",
  /** DNS */
  DNS = "DNS",
  /** DNS_ROUND_ROBIN */
  DNS_UNDERSCORE_ROUND_UNDERSCORE_ROBIN = "DNS_ROUND_ROBIN",
}

/**
 * Applicable only for MESH_INTERNAL services.
 *
 * @schema ServiceEntrySpecWorkloadSelector
 */
export interface ServiceEntrySpecWorkloadSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
   *
   * @schema ServiceEntrySpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ServiceEntrySpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecWorkloadSelector(obj: ServiceEntrySpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ServiceEntryV1Beta1
 */
export class ServiceEntryV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServiceEntryV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'ServiceEntry',
  }

  /**
   * Renders a Kubernetes manifest for "ServiceEntryV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServiceEntryV1Beta1Props = {}): any {
    return {
      ...ServiceEntryV1Beta1.GVK,
      ...toJson_ServiceEntryV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ServiceEntryV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServiceEntryV1Beta1Props = {}) {
    super(scope, id, {
      ...ServiceEntryV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServiceEntryV1Beta1.GVK,
      ...toJson_ServiceEntryV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema ServiceEntryV1Beta1
 */
export interface ServiceEntryV1Beta1Props {
  /**
   * @schema ServiceEntryV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
   *
   * @schema ServiceEntryV1Beta1#spec
   */
  readonly spec?: ServiceEntryV1Beta1Spec;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1Props(obj: ServiceEntryV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ServiceEntryV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
 *
 * @schema ServiceEntryV1Beta1Spec
 */
export interface ServiceEntryV1Beta1Spec {
  /**
   * The virtual IP addresses associated with the service.
   *
   * @schema ServiceEntryV1Beta1Spec#addresses
   */
  readonly addresses?: string[];

  /**
   * One or more endpoints associated with the service.
   *
   * @schema ServiceEntryV1Beta1Spec#endpoints
   */
  readonly endpoints?: ServiceEntryV1Beta1SpecEndpoints[];

  /**
   * A list of namespaces to which this service is exported.
   *
   * @schema ServiceEntryV1Beta1Spec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The hosts associated with the ServiceEntry.
   *
   * @schema ServiceEntryV1Beta1Spec#hosts
   */
  readonly hosts: string[];

  /**
   * Specify whether the service should be considered external to the mesh or part of the mesh.
   *
   * @schema ServiceEntryV1Beta1Spec#location
   */
  readonly location?: ServiceEntryV1Beta1SpecLocation;

  /**
   * The ports associated with the external service.
   *
   * @schema ServiceEntryV1Beta1Spec#ports
   */
  readonly ports?: ServiceEntryV1Beta1SpecPorts[];

  /**
   * Service resolution mode for the hosts.
   *
   * @schema ServiceEntryV1Beta1Spec#resolution
   */
  readonly resolution?: ServiceEntryV1Beta1SpecResolution;

  /**
   * If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
   *
   * @schema ServiceEntryV1Beta1Spec#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * Applicable only for MESH_INTERNAL services.
   *
   * @schema ServiceEntryV1Beta1Spec#workloadSelector
   */
  readonly workloadSelector?: ServiceEntryV1Beta1SpecWorkloadSelector;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1Spec(obj: ServiceEntryV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => y),
    'endpoints': obj.endpoints?.map(y => toJson_ServiceEntryV1Beta1SpecEndpoints(y)),
    'exportTo': obj.exportTo?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'location': obj.location,
    'ports': obj.ports?.map(y => toJson_ServiceEntryV1Beta1SpecPorts(y)),
    'resolution': obj.resolution,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'workloadSelector': toJson_ServiceEntryV1Beta1SpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntryV1Beta1SpecEndpoints
 */
export interface ServiceEntryV1Beta1SpecEndpoints {
  /**
   * Address associated with the network endpoint without the port.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#locality
   */
  readonly locality?: string;

  /**
   * Network enables Istio to group endpoints resident in the same L3 domain/network.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * The service account associated with the workload if a sidecar is present in the workload.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecEndpoints(obj: ServiceEntryV1Beta1SpecEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specify whether the service should be considered external to the mesh or part of the mesh.
 *
 * @schema ServiceEntryV1Beta1SpecLocation
 */
export enum ServiceEntryV1Beta1SpecLocation {
  /** MESH_EXTERNAL */
  MESH_UNDERSCORE_EXTERNAL = "MESH_EXTERNAL",
  /** MESH_INTERNAL */
  MESH_UNDERSCORE_INTERNAL = "MESH_INTERNAL",
}

/**
 * @schema ServiceEntryV1Beta1SpecPorts
 */
export interface ServiceEntryV1Beta1SpecPorts {
  /**
   * Label assigned to the port.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#name
   */
  readonly name: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#number
   */
  readonly number: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * The port number on the endpoint where the traffic will be received.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecPorts(obj: ServiceEntryV1Beta1SpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service resolution mode for the hosts.
 *
 * @schema ServiceEntryV1Beta1SpecResolution
 */
export enum ServiceEntryV1Beta1SpecResolution {
  /** NONE */
  NONE = "NONE",
  /** STATIC */
  STATIC = "STATIC",
  /** DNS */
  DNS = "DNS",
  /** DNS_ROUND_ROBIN */
  DNS_UNDERSCORE_ROUND_UNDERSCORE_ROBIN = "DNS_ROUND_ROBIN",
}

/**
 * Applicable only for MESH_INTERNAL services.
 *
 * @schema ServiceEntryV1Beta1SpecWorkloadSelector
 */
export interface ServiceEntryV1Beta1SpecWorkloadSelector {
  /**
   * One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
   *
   * @schema ServiceEntryV1Beta1SpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecWorkloadSelector(obj: ServiceEntryV1Beta1SpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

