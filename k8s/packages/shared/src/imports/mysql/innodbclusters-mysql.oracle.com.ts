// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema InnoDBCluster
 */
export class InnoDbCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "InnoDBCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'mysql.oracle.com/v2',
    kind: 'InnoDBCluster',
  }

  /**
   * Renders a Kubernetes manifest for "InnoDBCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: InnoDbClusterProps): any {
    return {
      ...InnoDbCluster.GVK,
      ...toJson_InnoDbClusterProps(props),
    };
  }

  /**
   * Defines a "InnoDBCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: InnoDbClusterProps) {
    super(scope, id, {
      ...InnoDbCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...InnoDbCluster.GVK,
      ...toJson_InnoDbClusterProps(resolved),
    };
  }
}

/**
 * @schema InnoDBCluster
 */
export interface InnoDbClusterProps {
  /**
   * @schema InnoDBCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema InnoDBCluster#spec
   */
  readonly spec: InnoDbClusterSpec;

}

/**
 * Converts an object of type 'InnoDbClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterProps(obj: InnoDbClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_InnoDbClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpec
 */
export interface InnoDbClusterSpec {
  /**
   * Backup profile specifications for the cluster, which can be referenced from backup schedules and one-off backup jobs
   *
   * @schema InnoDbClusterSpec#backupProfiles
   */
  readonly backupProfiles?: InnoDbClusterSpecBackupProfiles[];

  /**
   * Schedules for periodically executed backups
   *
   * @schema InnoDbClusterSpec#backupSchedules
   */
  readonly backupSchedules?: InnoDbClusterSpecBackupSchedules[];

  /**
   * Base value for MySQL server_id for instances in the cluster
   *
   * @schema InnoDbClusterSpec#baseServerId
   */
  readonly baseServerId?: number;

  /**
   * Template for a PersistentVolumeClaim, to be used as datadir
   *
   * @schema InnoDbClusterSpec#datadirVolumeClaimTemplate
   */
  readonly datadirVolumeClaimTemplate?: any;

  /**
   * MySQL Server Edition (community or enterprise)
   *
   * @schema InnoDbClusterSpec#edition
   */
  readonly edition?: string;

  /**
   * Defaults to Always, but set to IfNotPresent in deploy-operator.yaml when deploying Operator
   *
   * @default Always, but set to IfNotPresent in deploy-operator.yaml when deploying Operator
   * @schema InnoDbClusterSpec#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * @schema InnoDbClusterSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: InnoDbClusterSpecImagePullSecrets[];

  /**
   * Repository where images are pulled from; defaults to container-registry.oracle.com/mysql
   *
   * @schema InnoDbClusterSpec#imageRepository
   */
  readonly imageRepository?: string;

  /**
   * @schema InnoDbClusterSpec#initDB
   */
  readonly initDb?: InnoDbClusterSpecInitDb;

  /**
   * Number of MySQL replica instances for the cluster
   *
   * @schema InnoDbClusterSpec#instances
   */
  readonly instances?: number;

  /**
   * Keyring specification
   *
   * @schema InnoDbClusterSpec#keyring
   */
  readonly keyring?: InnoDbClusterSpecKeyring;

  /**
   * @schema InnoDbClusterSpec#logs
   */
  readonly logs?: InnoDbClusterSpecLogs;

  /**
   * Configuration of a Prometheus-style metrics provider
   *
   * @schema InnoDbClusterSpec#metrics
   */
  readonly metrics?: InnoDbClusterSpecMetrics;

  /**
   * Custom configuration additions for my.cnf
   *
   * @schema InnoDbClusterSpec#mycnf
   */
  readonly mycnf?: string;

  /**
   * @schema InnoDbClusterSpec#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema InnoDbClusterSpec#podLabels
   */
  readonly podLabels?: any;

  /**
   * @schema InnoDbClusterSpec#podSpec
   */
  readonly podSpec?: any;

  /**
   * @schema InnoDbClusterSpec#readReplicas
   */
  readonly readReplicas?: InnoDbClusterSpecReadReplicas[];

  /**
   * MySQL Router specification
   *
   * @schema InnoDbClusterSpec#router
   */
  readonly router?: InnoDbClusterSpecRouter;

  /**
   * Name of a generic type Secret containing root/default account password
   *
   * @schema InnoDbClusterSpec#secretName
   */
  readonly secretName: string;

  /**
   * Configuration of the Service used by applications connecting to the InnoDB Cluster
   *
   * @schema InnoDbClusterSpec#service
   */
  readonly service?: InnoDbClusterSpecService;

  /**
   * @schema InnoDbClusterSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * Name of a generic type Secret containing CA (ca.pem) and optional CRL (crl.pem) for SSL
   *
   * @schema InnoDbClusterSpec#tlsCASecretName
   */
  readonly tlsCaSecretName?: string;

  /**
   * Name of a TLS type Secret containing Server certificate and private key for SSL
   *
   * @schema InnoDbClusterSpec#tlsSecretName
   */
  readonly tlsSecretName?: string;

  /**
   * Enables use of self-signed TLS certificates, reducing or disabling TLS based security verifications
   *
   * @schema InnoDbClusterSpec#tlsUseSelfSigned
   */
  readonly tlsUseSelfSigned?: boolean;

  /**
   * MySQL Server version
   *
   * @schema InnoDbClusterSpec#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpec(obj: InnoDbClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backupProfiles': obj.backupProfiles?.map(y => toJson_InnoDbClusterSpecBackupProfiles(y)),
    'backupSchedules': obj.backupSchedules?.map(y => toJson_InnoDbClusterSpecBackupSchedules(y)),
    'baseServerId': obj.baseServerId,
    'datadirVolumeClaimTemplate': obj.datadirVolumeClaimTemplate,
    'edition': obj.edition,
    'imagePullPolicy': obj.imagePullPolicy,
    'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_InnoDbClusterSpecImagePullSecrets(y)),
    'imageRepository': obj.imageRepository,
    'initDB': toJson_InnoDbClusterSpecInitDb(obj.initDb),
    'instances': obj.instances,
    'keyring': toJson_InnoDbClusterSpecKeyring(obj.keyring),
    'logs': toJson_InnoDbClusterSpecLogs(obj.logs),
    'metrics': toJson_InnoDbClusterSpecMetrics(obj.metrics),
    'mycnf': obj.mycnf,
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
    'podSpec': obj.podSpec,
    'readReplicas': obj.readReplicas?.map(y => toJson_InnoDbClusterSpecReadReplicas(y)),
    'router': toJson_InnoDbClusterSpecRouter(obj.router),
    'secretName': obj.secretName,
    'service': toJson_InnoDbClusterSpecService(obj.service),
    'serviceAccountName': obj.serviceAccountName,
    'tlsCASecretName': obj.tlsCaSecretName,
    'tlsSecretName': obj.tlsSecretName,
    'tlsUseSelfSigned': obj.tlsUseSelfSigned,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfiles
 */
export interface InnoDbClusterSpecBackupProfiles {
  /**
   * @schema InnoDbClusterSpecBackupProfiles#dumpInstance
   */
  readonly dumpInstance?: InnoDbClusterSpecBackupProfilesDumpInstance;

  /**
   * Embedded backup profile, referenced as backupProfileName elsewhere
   *
   * @schema InnoDbClusterSpecBackupProfiles#name
   */
  readonly name: string;

  /**
   * @schema InnoDbClusterSpecBackupProfiles#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema InnoDbClusterSpecBackupProfiles#podLabels
   */
  readonly podLabels?: any;

  /**
   * @schema InnoDbClusterSpecBackupProfiles#snapshot
   */
  readonly snapshot?: InnoDbClusterSpecBackupProfilesSnapshot;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfiles' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfiles(obj: InnoDbClusterSpecBackupProfiles | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpInstance': toJson_InnoDbClusterSpecBackupProfilesDumpInstance(obj.dumpInstance),
    'name': obj.name,
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
    'snapshot': toJson_InnoDbClusterSpecBackupProfilesSnapshot(obj.snapshot),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedules
 */
export interface InnoDbClusterSpecBackupSchedules {
  /**
   * backupProfile specification if backupProfileName is not specified
   *
   * @schema InnoDbClusterSpecBackupSchedules#backupProfile
   */
  readonly backupProfile?: InnoDbClusterSpecBackupSchedulesBackupProfile;

  /**
   * Name of the backupProfile to be used
   *
   * @schema InnoDbClusterSpecBackupSchedules#backupProfileName
   */
  readonly backupProfileName?: string;

  /**
   * Whether to delete the backup data in case the MySQLBackup object created by the job is deleted
   *
   * @schema InnoDbClusterSpecBackupSchedules#deleteBackupData
   */
  readonly deleteBackupData?: boolean;

  /**
   * Whether the schedule is enabled or not
   *
   * @schema InnoDbClusterSpecBackupSchedules#enabled
   */
  readonly enabled?: boolean;

  /**
   * Name of the backup schedule
   *
   * @schema InnoDbClusterSpecBackupSchedules#name
   */
  readonly name: string;

  /**
   * The schedule of the job, syntax as a cron expression
   *
   * @schema InnoDbClusterSpecBackupSchedules#schedule
   */
  readonly schedule: string;

  /**
   * Timezone for the backup schedule, example: 'America/New_York'
   *
   * @schema InnoDbClusterSpecBackupSchedules#timeZone
   */
  readonly timeZone?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedules(obj: InnoDbClusterSpecBackupSchedules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backupProfile': toJson_InnoDbClusterSpecBackupSchedulesBackupProfile(obj.backupProfile),
    'backupProfileName': obj.backupProfileName,
    'deleteBackupData': obj.deleteBackupData,
    'enabled': obj.enabled,
    'name': obj.name,
    'schedule': obj.schedule,
    'timeZone': obj.timeZone,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecImagePullSecrets
 */
export interface InnoDbClusterSpecImagePullSecrets {
  /**
   * @schema InnoDbClusterSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecImagePullSecrets(obj: InnoDbClusterSpecImagePullSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDb
 */
export interface InnoDbClusterSpecInitDb {
  /**
   * @schema InnoDbClusterSpecInitDb#clone
   */
  readonly clone?: InnoDbClusterSpecInitDbClone;

  /**
   * @schema InnoDbClusterSpecInitDb#dump
   */
  readonly dump?: InnoDbClusterSpecInitDbDump;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDb' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDb(obj: InnoDbClusterSpecInitDb | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clone': toJson_InnoDbClusterSpecInitDbClone(obj.clone),
    'dump': toJson_InnoDbClusterSpecInitDbDump(obj.dump),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Keyring specification
 *
 * @schema InnoDbClusterSpecKeyring
 */
export interface InnoDbClusterSpecKeyring {
  /**
   * Keyring 'Encrypted File' specification
   *
   * @schema InnoDbClusterSpecKeyring#encryptedFile
   */
  readonly encryptedFile?: InnoDbClusterSpecKeyringEncryptedFile;

  /**
   * Keyring 'File' specification
   *
   * @schema InnoDbClusterSpecKeyring#file
   */
  readonly file?: InnoDbClusterSpecKeyringFile;

  /**
   * Keyring 'OCI' specification
   *
   * @schema InnoDbClusterSpecKeyring#oci
   */
  readonly oci?: InnoDbClusterSpecKeyringOci;

}

/**
 * Converts an object of type 'InnoDbClusterSpecKeyring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecKeyring(obj: InnoDbClusterSpecKeyring | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'encryptedFile': toJson_InnoDbClusterSpecKeyringEncryptedFile(obj.encryptedFile),
    'file': toJson_InnoDbClusterSpecKeyringFile(obj.file),
    'oci': toJson_InnoDbClusterSpecKeyringOci(obj.oci),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogs
 */
export interface InnoDbClusterSpecLogs {
  /**
   * @schema InnoDbClusterSpecLogs#collector
   */
  readonly collector?: InnoDbClusterSpecLogsCollector;

  /**
   * @schema InnoDbClusterSpecLogs#error
   */
  readonly error?: InnoDbClusterSpecLogsError;

  /**
   * @schema InnoDbClusterSpecLogs#general
   */
  readonly general?: InnoDbClusterSpecLogsGeneral;

  /**
   * @schema InnoDbClusterSpecLogs#slowQuery
   */
  readonly slowQuery?: InnoDbClusterSpecLogsSlowQuery;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogs(obj: InnoDbClusterSpecLogs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'collector': toJson_InnoDbClusterSpecLogsCollector(obj.collector),
    'error': toJson_InnoDbClusterSpecLogsError(obj.error),
    'general': toJson_InnoDbClusterSpecLogsGeneral(obj.general),
    'slowQuery': toJson_InnoDbClusterSpecLogsSlowQuery(obj.slowQuery),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration of a Prometheus-style metrics provider
 *
 * @schema InnoDbClusterSpecMetrics
 */
export interface InnoDbClusterSpecMetrics {
  /**
   * Toggle to enable or disable the metrics sidecar
   *
   * @schema InnoDbClusterSpecMetrics#enable
   */
  readonly enable: boolean;

  /**
   * Name of an image to be used for the metrics sidecar, if provided metrics will be enabled
   *
   * @schema InnoDbClusterSpecMetrics#image
   */
  readonly image: string;

  /**
   * Create a ServiceMonitor for Prometheus Operator
   *
   * @schema InnoDbClusterSpecMetrics#monitor
   */
  readonly monitor?: boolean;

  /**
   * Custom configuration for the ServiceMonitor object
   *
   * @schema InnoDbClusterSpecMetrics#monitorSpec
   */
  readonly monitorSpec?: any;

  /**
   * Options passed to the metrics provider as command line arguments
   *
   * @schema InnoDbClusterSpecMetrics#options
   */
  readonly options?: string[];

  /**
   * Name of a Secret with TLS certificate, key and CA, which will be mounted at /tls into the container an can be used from webConfig
   *
   * @schema InnoDbClusterSpecMetrics#tlsSecret
   */
  readonly tlsSecret?: string;

  /**
   * Name of a ConfigMap with a web.config file, if this option is provided a command line option --web.config.file is added
   *
   * @schema InnoDbClusterSpecMetrics#webConfig
   */
  readonly webConfig?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecMetrics' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecMetrics(obj: InnoDbClusterSpecMetrics | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enable': obj.enable,
    'image': obj.image,
    'monitor': obj.monitor,
    'monitorSpec': obj.monitorSpec,
    'options': obj.options?.map(y => y),
    'tlsSecret': obj.tlsSecret,
    'webConfig': obj.webConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecReadReplicas
 */
export interface InnoDbClusterSpecReadReplicas {
  /**
   * Base value for MySQL server_id for instances of the readReplica, if 0 it will be assigned automatically
   *
   * @schema InnoDbClusterSpecReadReplicas#baseServerId
   */
  readonly baseServerId: number;

  /**
   * Template for a PersistentVolumeClaim, to be used as datadir
   *
   * @schema InnoDbClusterSpecReadReplicas#datadirVolumeClaimTemplate
   */
  readonly datadirVolumeClaimTemplate?: any;

  /**
   * Number of MySQL instances for the set of read replica
   *
   * @schema InnoDbClusterSpecReadReplicas#instances
   */
  readonly instances?: number;

  /**
   * Custom configuration additions for my.cnf
   *
   * @schema InnoDbClusterSpecReadReplicas#mycnf
   */
  readonly mycnf?: string;

  /**
   * @schema InnoDbClusterSpecReadReplicas#name
   */
  readonly name: string;

  /**
   * @schema InnoDbClusterSpecReadReplicas#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema InnoDbClusterSpecReadReplicas#podLabels
   */
  readonly podLabels?: any;

  /**
   * @schema InnoDbClusterSpecReadReplicas#podSpec
   */
  readonly podSpec?: any;

  /**
   * MySQL Server version
   *
   * @schema InnoDbClusterSpecReadReplicas#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecReadReplicas' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecReadReplicas(obj: InnoDbClusterSpecReadReplicas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseServerId': obj.baseServerId,
    'datadirVolumeClaimTemplate': obj.datadirVolumeClaimTemplate,
    'instances': obj.instances,
    'mycnf': obj.mycnf,
    'name': obj.name,
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
    'podSpec': obj.podSpec,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MySQL Router specification
 *
 * @schema InnoDbClusterSpecRouter
 */
export interface InnoDbClusterSpecRouter {
  /**
   * Command line options passed to MySQL Router while bootstrapping
   *
   * @schema InnoDbClusterSpecRouter#bootstrapOptions
   */
  readonly bootstrapOptions?: string[];

  /**
   * Number of MySQL Router instances to deploy
   *
   * @schema InnoDbClusterSpecRouter#instances
   */
  readonly instances?: number;

  /**
   * Command line options passed to MySQL Router while running
   *
   * @schema InnoDbClusterSpecRouter#options
   */
  readonly options?: string[];

  /**
   * @schema InnoDbClusterSpecRouter#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema InnoDbClusterSpecRouter#podLabels
   */
  readonly podLabels?: any;

  /**
   * @schema InnoDbClusterSpecRouter#podSpec
   */
  readonly podSpec?: any;

  /**
   * Set routing options for the cluster
   *
   * @schema InnoDbClusterSpecRouter#routingOptions
   */
  readonly routingOptions?: InnoDbClusterSpecRouterRoutingOptions;

  /**
   * Name of a TLS type Secret containing MySQL Router certificate and private key used for SSL
   *
   * @schema InnoDbClusterSpecRouter#tlsSecretName
   */
  readonly tlsSecretName?: string;

  /**
   * Override MySQL Router version
   *
   * @schema InnoDbClusterSpecRouter#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecRouter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecRouter(obj: InnoDbClusterSpecRouter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bootstrapOptions': obj.bootstrapOptions?.map(y => y),
    'instances': obj.instances,
    'options': obj.options?.map(y => y),
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
    'podSpec': obj.podSpec,
    'routingOptions': toJson_InnoDbClusterSpecRouterRoutingOptions(obj.routingOptions),
    'tlsSecretName': obj.tlsSecretName,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration of the Service used by applications connecting to the InnoDB Cluster
 *
 * @schema InnoDbClusterSpecService
 */
export interface InnoDbClusterSpecService {
  /**
   * Custom annotations for the Service
   *
   * @schema InnoDbClusterSpecService#annotations
   */
  readonly annotations?: any;

  /**
   * Target for the Service's default (3306) port. If mysql-rw traffic will go to the primary and allow read and write operations, with mysql-ro traffic goes to the replica and allows only read operations, with mysql-rw-split the router's read-write-splitting will be targeted
   *
   * @schema InnoDbClusterSpecService#defaultPort
   */
  readonly defaultPort?: InnoDbClusterSpecServiceDefaultPort;

  /**
   * Custom labels for the Service
   *
   * @schema InnoDbClusterSpecService#labels
   */
  readonly labels?: any;

  /**
   * @schema InnoDbClusterSpecService#type
   */
  readonly type?: InnoDbClusterSpecServiceType;

}

/**
 * Converts an object of type 'InnoDbClusterSpecService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecService(obj: InnoDbClusterSpecService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': obj.annotations,
    'defaultPort': obj.defaultPort,
    'labels': obj.labels,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesDumpInstance
 */
export interface InnoDbClusterSpecBackupProfilesDumpInstance {
  /**
   * A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstance#dumpOptions
   */
  readonly dumpOptions?: any;

  /**
   * @schema InnoDbClusterSpecBackupProfilesDumpInstance#storage
   */
  readonly storage?: InnoDbClusterSpecBackupProfilesDumpInstanceStorage;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesDumpInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesDumpInstance(obj: InnoDbClusterSpecBackupProfilesDumpInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpOptions': obj.dumpOptions,
    'storage': toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorage(obj.storage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesSnapshot
 */
export interface InnoDbClusterSpecBackupProfilesSnapshot {
  /**
   * @schema InnoDbClusterSpecBackupProfilesSnapshot#storage
   */
  readonly storage?: InnoDbClusterSpecBackupProfilesSnapshotStorage;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesSnapshot' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesSnapshot(obj: InnoDbClusterSpecBackupProfilesSnapshot | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'storage': toJson_InnoDbClusterSpecBackupProfilesSnapshotStorage(obj.storage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * backupProfile specification if backupProfileName is not specified
 *
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfile
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfile {
  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfile#dumpInstance
   */
  readonly dumpInstance?: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance;

  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfile#podAnnotations
   */
  readonly podAnnotations?: any;

  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfile#podLabels
   */
  readonly podLabels?: any;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfile(obj: InnoDbClusterSpecBackupSchedulesBackupProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpInstance': toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance(obj.dumpInstance),
    'podAnnotations': obj.podAnnotations,
    'podLabels': obj.podLabels,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbClone
 */
export interface InnoDbClusterSpecInitDbClone {
  /**
   * URL of the cluster to clone from
   *
   * @schema InnoDbClusterSpecInitDbClone#donorUrl
   */
  readonly donorUrl: string;

  /**
   * User name used for cloning
   *
   * @schema InnoDbClusterSpecInitDbClone#rootUser
   */
  readonly rootUser?: string;

  /**
   * @schema InnoDbClusterSpecInitDbClone#secretKeyRef
   */
  readonly secretKeyRef: InnoDbClusterSpecInitDbCloneSecretKeyRef;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbClone' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbClone(obj: InnoDbClusterSpecInitDbClone | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'donorUrl': obj.donorUrl,
    'rootUser': obj.rootUser,
    'secretKeyRef': toJson_InnoDbClusterSpecInitDbCloneSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbDump
 */
export interface InnoDbClusterSpecInitDbDump {
  /**
   * Name of the dump. Not used by the operator, but a descriptive hint for the cluster administrator
   *
   * @schema InnoDbClusterSpecInitDbDump#name
   */
  readonly name?: string;

  /**
   * A dictionary of key-value pairs passed directly to MySQL Shell's loadDump()
   *
   * @schema InnoDbClusterSpecInitDbDump#options
   */
  readonly options?: any;

  /**
   * Path to the dump in the PVC. Use when specifying persistentVolumeClaim. Omit for ociObjectStorage, S3, or azure.
   *
   * @schema InnoDbClusterSpecInitDbDump#path
   */
  readonly path?: string;

  /**
   * @schema InnoDbClusterSpecInitDbDump#storage
   */
  readonly storage: InnoDbClusterSpecInitDbDumpStorage;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbDump' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbDump(obj: InnoDbClusterSpecInitDbDump | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'options': obj.options,
    'path': obj.path,
    'storage': toJson_InnoDbClusterSpecInitDbDumpStorage(obj.storage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Keyring 'Encrypted File' specification
 *
 * @schema InnoDbClusterSpecKeyringEncryptedFile
 */
export interface InnoDbClusterSpecKeyringEncryptedFile {
  /**
   * Path to the keyring file name inside the storage volume (will be prefixed by mount path)
   *
   * @schema InnoDbClusterSpecKeyringEncryptedFile#fileName
   */
  readonly fileName?: string;

  /**
   * Name of a secret that contains password for the keyring in the key 'keyring_password'
   *
   * @schema InnoDbClusterSpecKeyringEncryptedFile#password
   */
  readonly password: string;

  /**
   * Whether to open the keyring file in read-only mode
   *
   * @schema InnoDbClusterSpecKeyringEncryptedFile#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Specification of the volume to be mounted where the keyring file resides
   *
   * @schema InnoDbClusterSpecKeyringEncryptedFile#storage
   */
  readonly storage: any;

}

/**
 * Converts an object of type 'InnoDbClusterSpecKeyringEncryptedFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecKeyringEncryptedFile(obj: InnoDbClusterSpecKeyringEncryptedFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fileName': obj.fileName,
    'password': obj.password,
    'readOnly': obj.readOnly,
    'storage': obj.storage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Keyring 'File' specification
 *
 * @schema InnoDbClusterSpecKeyringFile
 */
export interface InnoDbClusterSpecKeyringFile {
  /**
   * Path to the keyring file name inside the storage volume (will be prefixed by mount path)
   *
   * @schema InnoDbClusterSpecKeyringFile#fileName
   */
  readonly fileName?: string;

  /**
   * Whether to open the keyring file in read-only mode
   *
   * @schema InnoDbClusterSpecKeyringFile#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Specification of the volume to be mounted where the keyring file resides
   *
   * @schema InnoDbClusterSpecKeyringFile#storage
   */
  readonly storage: any;

}

/**
 * Converts an object of type 'InnoDbClusterSpecKeyringFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecKeyringFile(obj: InnoDbClusterSpecKeyringFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fileName': obj.fileName,
    'readOnly': obj.readOnly,
    'storage': obj.storage,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Keyring 'OCI' specification
 *
 * @schema InnoDbClusterSpecKeyringOci
 */
export interface InnoDbClusterSpecKeyringOci {
  /**
   * Secret that contains ca.crt field with CA certificate bundle file that the keyring_oci plugin uses for Oracle Cloud Infrastructure certificate verification
   *
   * @schema InnoDbClusterSpecKeyringOci#caCertificate
   */
  readonly caCertificate?: string;

  /**
   * Compartment identifier in the form ocid1.compartment.oc1...
   *
   * @schema InnoDbClusterSpecKeyringOci#compartment
   */
  readonly compartment?: string;

  /**
   * @schema InnoDbClusterSpecKeyringOci#endpoints
   */
  readonly endpoints?: InnoDbClusterSpecKeyringOciEndpoints;

  /**
   * Private key fingerprint
   *
   * @schema InnoDbClusterSpecKeyringOci#keyFingerprint
   */
  readonly keyFingerprint: string;

  /**
   * A secret that contains the private key under the field 'privatekey'
   *
   * @schema InnoDbClusterSpecKeyringOci#keySecret
   */
  readonly keySecret: string;

  /**
   * Master key identified in the form ocid1.key.oc1...
   *
   * @schema InnoDbClusterSpecKeyringOci#masterKey
   */
  readonly masterKey?: string;

  /**
   * Tenancy identifier in the form ocid1.tenancy.oc1...
   *
   * @schema InnoDbClusterSpecKeyringOci#tenancy
   */
  readonly tenancy: string;

  /**
   * User identifier in the form of ocid1.user.oc1...
   *
   * @schema InnoDbClusterSpecKeyringOci#user
   */
  readonly user: string;

  /**
   * Vault identifier in the form ocid1.vault.oc1...
   *
   * @schema InnoDbClusterSpecKeyringOci#virtualVault
   */
  readonly virtualVault?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecKeyringOci' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecKeyringOci(obj: InnoDbClusterSpecKeyringOci | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificate': obj.caCertificate,
    'compartment': obj.compartment,
    'endpoints': toJson_InnoDbClusterSpecKeyringOciEndpoints(obj.endpoints),
    'keyFingerprint': obj.keyFingerprint,
    'keySecret': obj.keySecret,
    'masterKey': obj.masterKey,
    'tenancy': obj.tenancy,
    'user': obj.user,
    'virtualVault': obj.virtualVault,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollector
 */
export interface InnoDbClusterSpecLogsCollector {
  /**
   * Name of the collector container sidecar
   *
   * @schema InnoDbClusterSpecLogsCollector#containerName
   */
  readonly containerName?: string;

  /**
   * @schema InnoDbClusterSpecLogsCollector#env
   */
  readonly env?: any[];

  /**
   * Properties of the fluentd log collector
   *
   * @schema InnoDbClusterSpecLogsCollector#fluentd
   */
  readonly fluentd?: InnoDbClusterSpecLogsCollectorFluentd;

  /**
   * Name of an image, including registry and repository, to be used for the log collector sidecar. If provided it needs to be an image for the configured collector type.
   *
   * @schema InnoDbClusterSpecLogsCollector#image
   */
  readonly image?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollector(obj: InnoDbClusterSpecLogsCollector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'env': obj.env?.map(y => y),
    'fluentd': toJson_InnoDbClusterSpecLogsCollectorFluentd(obj.fluentd),
    'image': obj.image,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsError
 */
export interface InnoDbClusterSpecLogsError {
  /**
   * Whether error logging data should be collected. Implies that the logging should be enabled. If enabled the error log will be switched to JSON format output
   *
   * @schema InnoDbClusterSpecLogsError#collect
   */
  readonly collect?: boolean;

  /**
   * Log error verbosity. For details, see the MySQL Server --log-error-verbosity documentation.
   *
   * @schema InnoDbClusterSpecLogsError#verbosity
   */
  readonly verbosity?: number;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsError' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsError(obj: InnoDbClusterSpecLogsError | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'collect': obj.collect,
    'verbosity': obj.verbosity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsGeneral
 */
export interface InnoDbClusterSpecLogsGeneral {
  /**
   * Whether general logging data should be collected. Implies that the logging should be enabled.
   *
   * @schema InnoDbClusterSpecLogsGeneral#collect
   */
  readonly collect?: boolean;

  /**
   * Whether general logging should be enabled
   *
   * @schema InnoDbClusterSpecLogsGeneral#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsGeneral' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsGeneral(obj: InnoDbClusterSpecLogsGeneral | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'collect': obj.collect,
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsSlowQuery
 */
export interface InnoDbClusterSpecLogsSlowQuery {
  /**
   * Whether slow query logging data should be collected. Implies that the logging should be enabled.
   *
   * @schema InnoDbClusterSpecLogsSlowQuery#collect
   */
  readonly collect?: boolean;

  /**
   * Whether slow query logging should be enabled
   *
   * @schema InnoDbClusterSpecLogsSlowQuery#enabled
   */
  readonly enabled?: boolean;

  /**
   * Long query time threshold
   *
   * @schema InnoDbClusterSpecLogsSlowQuery#longQueryTime
   */
  readonly longQueryTime?: number;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsSlowQuery' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsSlowQuery(obj: InnoDbClusterSpecLogsSlowQuery | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'collect': obj.collect,
    'enabled': obj.enabled,
    'longQueryTime': obj.longQueryTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set routing options for the cluster
 *
 * @schema InnoDbClusterSpecRouterRoutingOptions
 */
export interface InnoDbClusterSpecRouterRoutingOptions {
  /**
   * @schema InnoDbClusterSpecRouterRoutingOptions#invalidated_cluster_policy
   */
  readonly invalidatedClusterPolicy?: InnoDbClusterSpecRouterRoutingOptionsInvalidatedClusterPolicy;

  /**
   * @schema InnoDbClusterSpecRouterRoutingOptions#read_only_targets
   */
  readonly readOnlyTargets?: InnoDbClusterSpecRouterRoutingOptionsReadOnlyTargets;

  /**
   * @schema InnoDbClusterSpecRouterRoutingOptions#stats_updates_frequency
   */
  readonly statsUpdatesFrequency?: number;

}

/**
 * Converts an object of type 'InnoDbClusterSpecRouterRoutingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecRouterRoutingOptions(obj: InnoDbClusterSpecRouterRoutingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'invalidated_cluster_policy': obj.invalidatedClusterPolicy,
    'read_only_targets': obj.readOnlyTargets,
    'stats_updates_frequency': obj.statsUpdatesFrequency,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Target for the Service's default (3306) port. If mysql-rw traffic will go to the primary and allow read and write operations, with mysql-ro traffic goes to the replica and allows only read operations, with mysql-rw-split the router's read-write-splitting will be targeted
 *
 * @schema InnoDbClusterSpecServiceDefaultPort
 */
export enum InnoDbClusterSpecServiceDefaultPort {
  /** mysql-rw */
  MYSQL_HYPHEN_RW = "mysql-rw",
  /** mysql-ro */
  MYSQL_HYPHEN_RO = "mysql-ro",
  /** mysql-rw-split */
  MYSQL_HYPHEN_RW_HYPHEN_SPLIT = "mysql-rw-split",
}

/**
 * @schema InnoDbClusterSpecServiceType
 */
export enum InnoDbClusterSpecServiceType {
  /** ClusterIP */
  CLUSTER_IP = "ClusterIP",
  /** NodePort */
  NODE_PORT = "NodePort",
  /** LoadBalancer */
  LOAD_BALANCER = "LoadBalancer",
}

/**
 * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorage
 */
export interface InnoDbClusterSpecBackupProfilesDumpInstanceStorage {
  /**
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorage#azure
   */
  readonly azure?: InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure;

  /**
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorage#ociObjectStorage
   */
  readonly ociObjectStorage?: InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage;

  /**
   * Specification of the PVC to be used. Used 'as is' in pod executing the backup.
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorage#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: any;

  /**
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorage#s3
   */
  readonly s3?: InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesDumpInstanceStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorage(obj: InnoDbClusterSpecBackupProfilesDumpInstanceStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azure': toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure(obj.azure),
    'ociObjectStorage': toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage(obj.ociObjectStorage),
    'persistentVolumeClaim': obj.persistentVolumeClaim,
    's3': toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesSnapshotStorage
 */
export interface InnoDbClusterSpecBackupProfilesSnapshotStorage {
  /**
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorage#azure
   */
  readonly azure?: InnoDbClusterSpecBackupProfilesSnapshotStorageAzure;

  /**
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorage#ociObjectStorage
   */
  readonly ociObjectStorage?: InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage;

  /**
   * Specification of the PVC to be used. Used 'as is' in pod executing the backup.
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorage#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: any;

  /**
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorage#s3
   */
  readonly s3?: InnoDbClusterSpecBackupProfilesSnapshotStorageS3;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesSnapshotStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesSnapshotStorage(obj: InnoDbClusterSpecBackupProfilesSnapshotStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azure': toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageAzure(obj.azure),
    'ociObjectStorage': toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage(obj.ociObjectStorage),
    'persistentVolumeClaim': obj.persistentVolumeClaim,
    's3': toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageS3(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance {
  /**
   * A dictionary of key-value pairs passed directly to MySQL Shell's DumpInstance()
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance#dumpOptions
   */
  readonly dumpOptions?: any;

  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance#storage
   */
  readonly storage?: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance(obj: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstance | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dumpOptions': obj.dumpOptions,
    'storage': toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage(obj.storage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbCloneSecretKeyRef
 */
export interface InnoDbClusterSpecInitDbCloneSecretKeyRef {
  /**
   * Secret name with key 'rootPassword' storing the password for the user specified in rootUser
   *
   * @schema InnoDbClusterSpecInitDbCloneSecretKeyRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbCloneSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbCloneSecretKeyRef(obj: InnoDbClusterSpecInitDbCloneSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbDumpStorage
 */
export interface InnoDbClusterSpecInitDbDumpStorage {
  /**
   * @schema InnoDbClusterSpecInitDbDumpStorage#azure
   */
  readonly azure?: InnoDbClusterSpecInitDbDumpStorageAzure;

  /**
   * @schema InnoDbClusterSpecInitDbDumpStorage#ociObjectStorage
   */
  readonly ociObjectStorage?: InnoDbClusterSpecInitDbDumpStorageOciObjectStorage;

  /**
   * Specification of the PVC to be used. Used 'as is' in the cloning pod.
   *
   * @schema InnoDbClusterSpecInitDbDumpStorage#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: any;

  /**
   * @schema InnoDbClusterSpecInitDbDumpStorage#s3
   */
  readonly s3?: InnoDbClusterSpecInitDbDumpStorageS3;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbDumpStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbDumpStorage(obj: InnoDbClusterSpecInitDbDumpStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azure': toJson_InnoDbClusterSpecInitDbDumpStorageAzure(obj.azure),
    'ociObjectStorage': toJson_InnoDbClusterSpecInitDbDumpStorageOciObjectStorage(obj.ociObjectStorage),
    'persistentVolumeClaim': obj.persistentVolumeClaim,
    's3': toJson_InnoDbClusterSpecInitDbDumpStorageS3(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecKeyringOciEndpoints
 */
export interface InnoDbClusterSpecKeyringOciEndpoints {
  /**
   * Encryption endpoint URI like {identifier}-crypto.kms.{region}.oraclecloud.com
   *
   * @schema InnoDbClusterSpecKeyringOciEndpoints#encryption
   */
  readonly encryption?: string;

  /**
   * Management endpoint URI like {identifier}-management.kms.{region}.oraclecloud.com
   *
   * @schema InnoDbClusterSpecKeyringOciEndpoints#management
   */
  readonly management?: string;

  /**
   * Secrets endpoint URI like secrets.vaults.{region}.oci.oraclecloud.com
   *
   * @schema InnoDbClusterSpecKeyringOciEndpoints#secrets
   */
  readonly secrets?: string;

  /**
   * Vaults endpoint URI like vaults.{region}.oci.oraclecloud.com
   *
   * @schema InnoDbClusterSpecKeyringOciEndpoints#vaults
   */
  readonly vaults?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecKeyringOciEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecKeyringOciEndpoints(obj: InnoDbClusterSpecKeyringOciEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'encryption': obj.encryption,
    'management': obj.management,
    'secrets': obj.secrets,
    'vaults': obj.vaults,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Properties of the fluentd log collector
 *
 * @schema InnoDbClusterSpecLogsCollectorFluentd
 */
export interface InnoDbClusterSpecLogsCollectorFluentd {
  /**
   * Raw configuration of additional Fluentd filters to be added to the configuration file
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentd#additionalFilterConfiguration
   */
  readonly additionalFilterConfiguration?: string;

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentd#errorLog
   */
  readonly errorLog?: InnoDbClusterSpecLogsCollectorFluentdErrorLog;

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentd#generalLog
   */
  readonly generalLog?: InnoDbClusterSpecLogsCollectorFluentdGeneralLog;

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentd#recordAugmentation
   */
  readonly recordAugmentation?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation;

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentd#sinks
   */
  readonly sinks?: InnoDbClusterSpecLogsCollectorFluentdSinks[];

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentd#slowQueryLog
   */
  readonly slowQueryLog?: InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentd(obj: InnoDbClusterSpecLogsCollectorFluentd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalFilterConfiguration': obj.additionalFilterConfiguration,
    'errorLog': toJson_InnoDbClusterSpecLogsCollectorFluentdErrorLog(obj.errorLog),
    'generalLog': toJson_InnoDbClusterSpecLogsCollectorFluentdGeneralLog(obj.generalLog),
    'recordAugmentation': toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation(obj.recordAugmentation),
    'sinks': obj.sinks?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdSinks(y)),
    'slowQueryLog': toJson_InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog(obj.slowQueryLog),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecRouterRoutingOptionsInvalidatedClusterPolicy
 */
export enum InnoDbClusterSpecRouterRoutingOptionsInvalidatedClusterPolicy {
  /** drop_all */
  DROP_UNDERSCORE_ALL = "drop_all",
  /** accept_ro */
  ACCEPT_UNDERSCORE_RO = "accept_ro",
}

/**
 * @schema InnoDbClusterSpecRouterRoutingOptionsReadOnlyTargets
 */
export enum InnoDbClusterSpecRouterRoutingOptionsReadOnlyTargets {
  /** all */
  ALL = "all",
  /** read_replicas */
  READ_UNDERSCORE_REPLICAS = "read_replicas",
  /** secondaries */
  SECONDARIES = "secondaries",
}

/**
 * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure
 */
export interface InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure {
  /**
   * Name of a Secret with Azure BLOB Storage configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure#config
   */
  readonly config: string;

  /**
   * Name of the Azure  BLOB Storage container where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure#containerName
   */
  readonly containerName: string;

  /**
   * Path in the container where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure(obj: InnoDbClusterSpecBackupProfilesDumpInstanceStorageAzure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'containerName': obj.containerName,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage
 */
export interface InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage {
  /**
   * Name of the OCI bucket where backup is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with data for accessing the bucket
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage#credentials
   */
  readonly credentials: string;

  /**
   * Path in bucket where backup is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage(obj: InnoDbClusterSpecBackupProfilesDumpInstanceStorageOciObjectStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'credentials': obj.credentials,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3
 */
export interface InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3 {
  /**
   * Name of the S3 bucket where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with S3 configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3#config
   */
  readonly config: string;

  /**
   * Override endpoint URL
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3#prefix
   */
  readonly prefix?: string;

  /**
   * Profile being used in configuration files
   *
   * @schema InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3#profile
   */
  readonly profile?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3(obj: InnoDbClusterSpecBackupProfilesDumpInstanceStorageS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'config': obj.config,
    'endpoint': obj.endpoint,
    'prefix': obj.prefix,
    'profile': obj.profile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageAzure
 */
export interface InnoDbClusterSpecBackupProfilesSnapshotStorageAzure {
  /**
   * Name of a Secret with Azure BLOB Storage configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageAzure#config
   */
  readonly config: string;

  /**
   * Name of the Azure  BLOB Storage container where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageAzure#containerName
   */
  readonly containerName: string;

  /**
   * Path in the container where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageAzure#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesSnapshotStorageAzure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageAzure(obj: InnoDbClusterSpecBackupProfilesSnapshotStorageAzure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'containerName': obj.containerName,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage
 */
export interface InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage {
  /**
   * Bucket name where backup is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with data for accessing the bucket
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage#credentials
   */
  readonly credentials: string;

  /**
   * Path in bucket where backup is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage(obj: InnoDbClusterSpecBackupProfilesSnapshotStorageOciObjectStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'credentials': obj.credentials,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3
 */
export interface InnoDbClusterSpecBackupProfilesSnapshotStorageS3 {
  /**
   * Name of the S3 bucket where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with S3 configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3#config
   */
  readonly config: string;

  /**
   * Override endpoint URL
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3#prefix
   */
  readonly prefix?: string;

  /**
   * Profile being used in configuration files
   *
   * @schema InnoDbClusterSpecBackupProfilesSnapshotStorageS3#profile
   */
  readonly profile?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupProfilesSnapshotStorageS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupProfilesSnapshotStorageS3(obj: InnoDbClusterSpecBackupProfilesSnapshotStorageS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'config': obj.config,
    'endpoint': obj.endpoint,
    'prefix': obj.prefix,
    'profile': obj.profile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage {
  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage#azure
   */
  readonly azure?: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure;

  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage#ociObjectStorage
   */
  readonly ociObjectStorage?: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage;

  /**
   * Specification of the PVC to be used. Used 'as is' in pod executing the backup.
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: any;

  /**
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage#s3
   */
  readonly s3?: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage(obj: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azure': toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure(obj.azure),
    'ociObjectStorage': toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage(obj.ociObjectStorage),
    'persistentVolumeClaim': obj.persistentVolumeClaim,
    's3': toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3(obj.s3),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbDumpStorageAzure
 */
export interface InnoDbClusterSpecInitDbDumpStorageAzure {
  /**
   * Name of a Secret with Azure BLOB Storage configuration and credentials
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageAzure#config
   */
  readonly config: string;

  /**
   * Name of the Azure  BLOB Storage container where the dump is stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageAzure#containerName
   */
  readonly containerName: string;

  /**
   * Path in the container where the dump files are stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageAzure#prefix
   */
  readonly prefix: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbDumpStorageAzure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbDumpStorageAzure(obj: InnoDbClusterSpecInitDbDumpStorageAzure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'containerName': obj.containerName,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbDumpStorageOciObjectStorage
 */
export interface InnoDbClusterSpecInitDbDumpStorageOciObjectStorage {
  /**
   * Name of the OCI bucket where the dump is stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageOciObjectStorage#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with data for accessing the bucket
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageOciObjectStorage#credentials
   */
  readonly credentials: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageOciObjectStorage#prefix
   */
  readonly prefix: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbDumpStorageOciObjectStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbDumpStorageOciObjectStorage(obj: InnoDbClusterSpecInitDbDumpStorageOciObjectStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'credentials': obj.credentials,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecInitDbDumpStorageS3
 */
export interface InnoDbClusterSpecInitDbDumpStorageS3 {
  /**
   * Name of the S3 bucket where the dump is stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with S3 configuration and credentials
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageS3#config
   */
  readonly config: string;

  /**
   * Override endpoint URL
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageS3#prefix
   */
  readonly prefix: string;

  /**
   * Profile being used in configuration files
   *
   * @schema InnoDbClusterSpecInitDbDumpStorageS3#profile
   */
  readonly profile?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecInitDbDumpStorageS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecInitDbDumpStorageS3(obj: InnoDbClusterSpecInitDbDumpStorageS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'config': obj.config,
    'endpoint': obj.endpoint,
    'prefix': obj.prefix,
    'profile': obj.profile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdErrorLog
 */
export interface InnoDbClusterSpecLogsCollectorFluentdErrorLog {
  /**
   * fluentd specific options for the error log
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdErrorLog#options
   */
  readonly options?: any;

  /**
   * Tag for the error log records
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdErrorLog#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdErrorLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdErrorLog(obj: InnoDbClusterSpecLogsCollectorFluentdErrorLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': obj.options,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdGeneralLog
 */
export interface InnoDbClusterSpecLogsCollectorFluentdGeneralLog {
  /**
   * fluentd specific options for the general log
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdGeneralLog#options
   */
  readonly options?: any;

  /**
   * Tag for the general log records
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdGeneralLog#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdGeneralLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdGeneralLog(obj: InnoDbClusterSpecLogsCollectorFluentdGeneralLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': obj.options,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation {
  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#annotations
   */
  readonly annotations?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations[];

  /**
   * Whether to enable record augmentation with additional data
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#labels
   */
  readonly labels?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels[];

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#podFields
   */
  readonly podFields?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields[];

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#resourceFields
   */
  readonly resourceFields?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields[];

  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation#staticFields
   */
  readonly staticFields?: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields[];

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': obj.annotations?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations(y)),
    'enabled': obj.enabled,
    'labels': obj.labels?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels(y)),
    'podFields': obj.podFields?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields(y)),
    'resourceFields': obj.resourceFields?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields(y)),
    'staticFields': obj.staticFields?.map(y => toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdSinks
 */
export interface InnoDbClusterSpecLogsCollectorFluentdSinks {
  /**
   * Name of the sink. Used only for documentation purposes
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdSinks#name
   */
  readonly name: string;

  /**
   * Raw configuration of the sink
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdSinks#rawConfig
   */
  readonly rawConfig: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdSinks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdSinks(obj: InnoDbClusterSpecLogsCollectorFluentdSinks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'rawConfig': obj.rawConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog
 */
export interface InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog {
  /**
   * fluentd specific options for the slow log
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog#options
   */
  readonly options?: any;

  /**
   * Tag for the slow log records
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog#tag
   */
  readonly tag?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog(obj: InnoDbClusterSpecLogsCollectorFluentdSlowQueryLog | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'options': obj.options,
    'tag': obj.tag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure {
  /**
   * Name of a Secret with Azure BLOB Storage configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure#config
   */
  readonly config: string;

  /**
   * Name of the Azure  BLOB Storage container where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure#containerName
   */
  readonly containerName: string;

  /**
   * Path in the container where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure(obj: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageAzure | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'containerName': obj.containerName,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage {
  /**
   * Name of the OCI Bucket where backup is stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with data for accessing the bucket
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage#credentials
   */
  readonly credentials: string;

  /**
   * Path in bucket where backup is stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage(obj: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageOciObjectStorage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'credentials': obj.credentials,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3
 */
export interface InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3 {
  /**
   * Name of the S3 bucket where the dump is stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3#bucketName
   */
  readonly bucketName: string;

  /**
   * Name of a Secret with S3 configuration and credentials
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3#config
   */
  readonly config: string;

  /**
   * Override endpoint URL
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3#endpoint
   */
  readonly endpoint?: string;

  /**
   * Path in the bucket where the dump files are stored
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3#prefix
   */
  readonly prefix?: string;

  /**
   * Profile being used in configuration files
   *
   * @schema InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3#profile
   */
  readonly profile?: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3(obj: InnoDbClusterSpecBackupSchedulesBackupProfileDumpInstanceStorageS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'config': obj.config,
    'endpoint': obj.endpoint,
    'prefix': obj.prefix,
    'profile': obj.profile,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations {
  /**
   * Name of the pod label that holds the value to be stored under fieldName in the log record
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations#annotationName
   */
  readonly annotationName: string;

  /**
   * Name of the field added to the log record with value from annotationName
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations#fieldName
   */
  readonly fieldName: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationAnnotations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationName': obj.annotationName,
    'fieldName': obj.fieldName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels {
  /**
   * Name of the field added to the log record with value from labelName
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels#fieldName
   */
  readonly fieldName: string;

  /**
   * Name of the pod label that holds the value to be stored under fieldName in the log record
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels#labelName
   */
  readonly labelName: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationLabels | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldName': obj.fieldName,
    'labelName': obj.labelName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields {
  /**
   * Name of the field added to the log record with value taken from a field with path stored in fieldPath
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields#fieldName
   */
  readonly fieldName: string;

  /**
   * Value for the field fieldName. The path should be of the same syntax as the one used for mounting environment variables from field reference - valueFrom.fieldRef.fieldPath . The field will be mounted in the pod as a environment variable, prefixed with a prefix and used then added to the log record. Examples for fieldRef are : spec.nodeName, metadata.namespace, status.podIP, etc.
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationPodFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldName': obj.fieldName,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields {
  /**
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields#containerName
   */
  readonly containerName: string;

  /**
   * Name of the field added to the log record with value taken from a field with path stored in fieldPath
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields#fieldName
   */
  readonly fieldName: string;

  /**
   * See https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#use-container-fields-as-values-for-environment-variables
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationResourceFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'fieldName': obj.fieldName,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields
 */
export interface InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields {
  /**
   * Name of the field added to the log record with value from fieldValue
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields#fieldName
   */
  readonly fieldName: string;

  /**
   * Value for the static field with name taken from fieldName
   *
   * @schema InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields#fieldValue
   */
  readonly fieldValue: string;

}

/**
 * Converts an object of type 'InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields(obj: InnoDbClusterSpecLogsCollectorFluentdRecordAugmentationStaticFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldName': obj.fieldName,
    'fieldValue': obj.fieldValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

