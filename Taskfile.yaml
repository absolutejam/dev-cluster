version: "3"

dotenv:
  - "./.env"

env:
  CDK8S_CHECK_UPGRADE: false

vars:
  K3D_CLUSTER: lab

  GITEA_HOST: gitea.dev-cluster.local
  GITEA_USER: gitea-admin
  GITEA_PASSWORD: admin123!

  NPM_ALIAS: "@crashloopbackoff.dev"
  REGISTRY: k3d-registry.localhost:5000

  KV_KEY_NPM_TOKEN: "npm-token@dev-cluster"
  KV_KEY_NPMRC: ".npmrc@dev-cluster"
  KV_KEY_KUBECONFIG: "kubeconfig@dev-cluster"
  KV_KEY_PKI_CERT: "cert@dev-cluster"
  KV_KEY_PKI_KEY: "cert-key@dev-cluster"

includes:
  validation:
    dir: ./validation
    taskfile: ./validation/Taskfile.yaml

  service:
    dir: ./k8s
    taskfile: ./Taskfile.services.yaml

  docs:
    dir: ./docs
    taskfile: ./docs/Taskfile.yaml

tasks:
  #-------------------------------------------------------------------------------
  # High level
  #-------------------------------------------------------------------------------

  up:
    desc: ðŸš€ Spins up the cluster
    cmds:
      - task: deps:check
      - task: dev:gen-ca
      - task: clean
      - task: sync-kv

      - task: cluster:up
      - task: dev:build-woodpecker-image

      # Bootstrap
      - task: service:deploy:core
      - task: validation:pki

      # Woodpecker
      - task: dev:gen-woodpecker-oauth-client
      - task: service:deploy
        vars:
          SERVICE: woodpecker
          NAMESPACE: ext-woodpecker

      - task: service:wait-for
        vars:
          KIND: pod
          SELECTORS: app.kubernetes.io/instance=woodpecker,app.kubernetes.io/name=server
          NAMESPACE: ext-woodpecker

  down:
    desc: Tear down the cluster
    cmds:
      - k3d cluster rm --config cluster/k3d.yaml

  clean:
    desc: Clean any temporary files & secrets
    silent: true
    cmds:
      - |
        for key in $(skate list @dev-cluster --keys-only); do 
          skate delete ${key}@dev-cluster
        done

  sync-kv:
    desc: Syncs config to KV
    silent: true
    cmds:
      - |
        skate set {{ .KV_KEY_PKI_CERT }} <<<"./pki/ca.pem"
        skate set {{ .KV_KEY_PKI_KEY }} <<<"./pki/ca-key.pem"

  #-------------------------------------------------------------------------------
  # Bootstrap
  #-------------------------------------------------------------------------------

  bootstrap:
    desc: Bootstrap cluster core
    cmds:
      - task: service:wait-for
        vars:
          kind: pod
          selectors: app=gitea
          namespace: ext-gitea

  #-------------------------------------------------------------------------------
  # Cluster
  #-------------------------------------------------------------------------------

  cluster:up:
    desc: Spin up the K3d cluster
    env:
      KUBECONFIG: "" # to get Kubeconfig merged
    dir: ./cluster
    cmds:
      - silent: true
        cmd: |
          cluster_output=$(k3d cluster ls --no-headers | grep "{{ .K3D_CLUSTER }}" || true)

          if [ -n "${cluster_output}" ]; then
            gum log -l info -t kitchen \
              "Cluster already exists"

            gum log -l info -t kitchen -s \
              "Run the following to remove it" \
              "command" "k3d cluster rm {{ .K3D_CLUSTER }}"
          else
            if [ {{ .USE_CALICO | default "false" }} == "true" ]; then 
              extra_args="--volume \"$(pwd)/manifests:/var/lib/rancher/k3s/server/manifests/calico.yaml@server:*\""
              extra_args="${extra_args} --flannel-backend=\"none@server:*\""
            fi

            k3d cluster create --config k3d.yaml ${extra_args}
          fi

          gum log -l debug -t kitchen -s \
            "Exporting kubeconfig" \
            "key" "{{ .KV_KEY_KUBECONFIG }}"
          skate set "{{ .KV_KEY_KUBECONFIG }}" <<<$(k3d kubeconfig get lab)

          gum log -l info -t kitchen "Waiting for cluster to be ready"

          kubectl wait pod \
            --namespace kube-system \
            -l k8s-app=kube-dns \
            --for=condition=ready \
            --timeout=300s

  #-------------------------------------------------------------------------------
  # Repos
  #-------------------------------------------------------------------------------

  git:setup:
    desc: Setup git repos (etc.)
    dir: git
    env:
      # Terraform provider-specific env vars
      GITEA_BASE_URL: "https://{{ .GITEA_HOST }}"
      GITEA_USERNAME: "{{ .GITEA_USER }}"
      GITEA_PASSWORD: "{{ .GITEA_PASSWORD }}"
    cmds:
      - terraform plan
      - terraform apply

  #-------------------------------------------------------------------------------
  # Dependencies
  #-------------------------------------------------------------------------------

  deps:check:
    desc: Checks all required tools are installed
    silent: true
    preconditions:
      - which k3d > /dev/null
      - which kubectl > /dev/null
      - which gum > /dev/null
    cmd: |
      gum log -l info -t kitchen -s "All required binaries are available âœ…"

  #-------------------------------------------------------------------------------
  # Dev tasks
  #-------------------------------------------------------------------------------

  dev:gen-npm-token:
    desc: Generate an access token for (p)npm
    env:
      SCOPES: '["write:organization"]'
    cmd: ./bin/gitea_generate_npm_token.sh

  dev:create-npm-config:
    desc: Create the NPM config for publishing & pulling packages
    dir: services
    cmds:
      - cmd: |
          gum log -l info -t kitchen -s "Generating .npmrc" "key" "{{ .KV_KEY_NPM_TOKEN }}"
          PAT=$(skate get "{{ .KV_KEY_NPM_TOKEN }}" | jq -r '.sha1')

          cat <<EOF | skate set "{{ .KV_KEY_NPMRC }}".npmrc@dev-cluster
          pnpm config set {{ .NPM_ALIAS }} https://{{ .GITEA_HOST }}/api/packages/{{ .GITEA_USER }}/npm/
          pnpm config set -- '//{{ .GITEA_HOST }}/api/packages/{{ .USER }}/npm/:_authToken' "${PAT}"
          pnpm config set -- '//{{ .GITEA_HOST }}/api/packages//npm/:_authToken' "${PAT}"
          EOF

          skate get .npmrc@dev-cluster > .npmrc
        silent: true

  dev:gen-woodpecker-oauth-client:
    desc: Generates a Gitea client for Woodpecker to use
    cmd: ./bin/gitea_generate_woodpecker_oauth_client.sh

  dev:gen-repo:
    desc: Generates a repo
    env:
      SERVICE: "{{ .CLI_ARGS }}"
    cmd: ./bin/gitea_create_repo.sh

  dev:gen-ca:
    dir: pki
    desc: Generate a CA cert, if one does not already exist
    cmds:
      - silent: true
        cmd: |
          if [ -f "ca.pem" ]; then
            gum log -l info -t kitchen "CA cert already exists"
          else
            gum log -l info -t kitchen "Generating CA cert - Don't forget to trust it!"
            cfssl gencert -initca ca-csr.json | cfssljson -bare ca -
          fi

  dev:trust-ca:
    desc: Trusts the generated CA cert
    dir: pki
    preconditions:
      - sh: "[ -f ca.pem ]"
        msg: CA cert does not exist
    cmd: |
      sudo security add-trusted-cert \
        -d \
        -r trustRoot \
        -k /Library/Keychains/System.keychain \
        ca.pem

  dev:build-woodpecker-image:
    desc: Build woodpecker plugin-git image
    vars:
      IMAGE_NAME: woodpecker/plugin-git
    sources:
      - ./pki/ca.pem
      - ./others/woodpecker/plugin-git/Dockerfile
    cmds:
      - cmd: |
          gum log -l info -t kitchen -s \
            "Building custom woodpecker plugin-git image" \
            "image" "{{ .REGISTRY }}/{{ .IMAGE_NAME }}"
        silent: true
      - |
        cert=$(skate get {{ .KV_KEY_PKI_CERT }})

        docker build \
          --build-arg="cert=${cert}" \
          -t {{ .REGISTRY }}/{{ .IMAGE_NAME }} \
          other/woodpecker/plugin-git
      - docker push {{ .REGISTRY }}/{{ .IMAGE_NAME }}

  dev:tools:
    desc: Spin up a tools Pod in provided namespace
    interactive: true
    vars:
      POD_NAME: tools
      NAMESPACE: '{{ .CLI_ARGS | default "default" }}'
      IMAGE: alpine:latest
    cmds:
      - kubectl -n {{ .NAMESPACE }} run {{ .POD_NAME }} --image={{ .IMAGE }} --command -- sleep infinity || true
      - kubectl -n {{ .NAMESPACE }} wait --for=condition=ready pod/{{ .POD_NAME }} --timeout=30s
      - kubectl -n {{ .NAMESPACE }} exec {{ .POD_NAME }} -it -- sh

  dev:add-helm-repos:
    desc: Adds all Helm repos
    cmds:
      - helm repo add istio https://istio-release.storage.googleapis.com/charts
      - helm repo add traefik https://traefik.github.io/charts
      - helm repo add gitea-charts https://dl.gitea.com/charts
      - helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets
      - helm repo add woodpecker https://woodpecker-ci.org
      - helm repo add crossplane-stable https://charts.crossplane.io/stable
      - helm repo add kiali https://kiali.org/helm-charts
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard
      - helm repo add mysqloperator https://
      - helm repo add falcosecurity https://falcosecurity.github.io/charts
      - helm repo update
      - helm repo ls
